{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Secure Connectivity to Cloud Applications @ Overview @ We will provide series of quickstart guides on how to quickly deploy and configure Secure Overlay Network via NetFoundry to connect Enterprise Remote Users or Branch Applications/Users to Applications located in various public or private clouds. Use cases: @ Azure Cloud Connectivity Use Case Overview User to Cloud Application Connection Branch Application to Cloud Application Connection AWS Cloud Connectivity Coming soon Google Cloud Connectivity Coming soon Note Regardless of where Applications Users are trying to reach reside, NetFoundry (NF) Network Fabric needs to be provisioned and deployed first. Navigate to NetFoundry/NF Fabric to find more information on how to stand up the NF Network Fabric.","title":"Home"},{"location":"#secure_connectivity_to_cloud_applications","text":"","title":"Secure Connectivity to Cloud Applications"},{"location":"#overview","text":"We will provide series of quickstart guides on how to quickly deploy and configure Secure Overlay Network via NetFoundry to connect Enterprise Remote Users or Branch Applications/Users to Applications located in various public or private clouds.","title":"Overview"},{"location":"#use_cases","text":"Azure Cloud Connectivity Use Case Overview User to Cloud Application Connection Branch Application to Cloud Application Connection AWS Cloud Connectivity Coming soon Google Cloud Connectivity Coming soon Note Regardless of where Applications Users are trying to reach reside, NetFoundry (NF) Network Fabric needs to be provisioned and deployed first. Navigate to NetFoundry/NF Fabric to find more information on how to stand up the NF Network Fabric.","title":"Use cases:"},{"location":"aws/intro/","text":"Use Case Overview @ Users can reach application located in AWS's private subnets over Internet using secure tunnels from anywhere users have connections to the Internet as depicted in the diagram. Note The tunnels are encrypted and user-app sessions are hashed across 3 diverse paths by default. Use Case Diagram @","title":"Use Case Overview"},{"location":"aws/intro/#use_case_overview","text":"Users can reach application located in AWS's private subnets over Internet using secure tunnels from anywhere users have connections to the Internet as depicted in the diagram. Note The tunnels are encrypted and user-app sessions are hashed across 3 diverse paths by default.","title":"Use Case Overview"},{"location":"aws/intro/#use_case_diagram","text":"","title":"Use Case Diagram"},{"location":"azure/","text":"resource.yaml file opions @ appwans : - action : { e.g. create , get , delete } endpoints : { list of endpoint names to be added } name : { name for the appwan } services : { list of services to be added } environment : { NF Console Environment , e.g. Production } gateway_list : - action : { e.g. create , get , delete } cloud : { public cloud , e.g. azure } count : 1 names : { empty , will be filled in by script } region : { cloud region that gateways will be deployed in } regionalCidr : { list of IP address space in Resource group } regkeys : { empty , will be filled in by script } resourceGroup : name : { Azure Resource Group name used/created } region : { Azure Resource Group region used/created } tag : { text } network_action : { e.g. create , get , delete } network_name : { network name to use } services : - action : { e.g. create , get , delete } gateway : { name of the gateway used for this service } ip : (destination ip for the service) name : { empty , automatically generated and populated by the wrapper script } port : (destination port for the service) type : { e.g. host , network; host only enabled in this script right now } terraform : bin : { path to terraform binary } output : { boolean e.g. no or yes } source : ./quickstarts/docs/terraform { where the terraform module is located e.g. azure } work_dir : . { directory where the terraform from main plan file to be installed }","title":"resource.yaml file opions"},{"location":"azure/#resourceyaml_file_opions","text":"appwans : - action : { e.g. create , get , delete } endpoints : { list of endpoint names to be added } name : { name for the appwan } services : { list of services to be added } environment : { NF Console Environment , e.g. Production } gateway_list : - action : { e.g. create , get , delete } cloud : { public cloud , e.g. azure } count : 1 names : { empty , will be filled in by script } region : { cloud region that gateways will be deployed in } regionalCidr : { list of IP address space in Resource group } regkeys : { empty , will be filled in by script } resourceGroup : name : { Azure Resource Group name used/created } region : { Azure Resource Group region used/created } tag : { text } network_action : { e.g. create , get , delete } network_name : { network name to use } services : - action : { e.g. create , get , delete } gateway : { name of the gateway used for this service } ip : (destination ip for the service) name : { empty , automatically generated and populated by the wrapper script } port : (destination port for the service) type : { e.g. host , network; host only enabled in this script right now } terraform : bin : { path to terraform binary } output : { boolean e.g. no or yes } source : ./quickstarts/docs/terraform { where the terraform module is located e.g. azure } work_dir : . { directory where the terraform from main plan file to be installed }","title":"resource.yaml file opions"},{"location":"azure/connectApp2App/","text":"Branch Application to Cloud Application Connection @ This quickstart guide will provide steps to create a secure service between a branch application and/or user and an application hosted in Azure Cloud using NetFoundry Overlay Fabric (NFOF). Create Host Service @ Important Assumption is that the NF Fabric is already up and the NF Gateway is installed. Console UI console ui content NF Token - Python token content NF REST CRUD - Python rest crud content Create AppWan @","title":"Branch Application to Cloud Application Connection"},{"location":"azure/connectApp2App/#branch_application_to_cloud_application_connection","text":"This quickstart guide will provide steps to create a secure service between a branch application and/or user and an application hosted in Azure Cloud using NetFoundry Overlay Fabric (NFOF).","title":"Branch Application to Cloud Application Connection"},{"location":"azure/connectApp2App/#create_host_service","text":"Important Assumption is that the NF Fabric is already up and the NF Gateway is installed. Console UI console ui content NF Token - Python token content NF REST CRUD - Python rest crud content","title":"Create Host Service"},{"location":"azure/connectApp2App/#create_appwan","text":"","title":"Create AppWan"},{"location":"azure/connectUser2App/","text":"User to Cloud Application Connection @ This quickstart guide will provide all the steps to create a secure service between a user and an application hosted in Azure Cloud using NetFoundry Overlay Fabric (NFOF). Important Assumption is that the NF Fabric is already up and the NF Client is installed. Through NF Web Console UI @ Create and install NF Client @ This section will guide a user through the steps on how to createaal the a client in the NF Console UI. Then, it will provide links to Guides on how to install the NetFoundry Client Software for Windows and MAC Clients, including the registration with the NF Network Fabric. Console UI Navigate to Manage Clients Page Click on + sign in the top right corner. Fill in the required information and click on \"Create\" Copy the Client Registration Key Install the NF Client Software by following the directions at the appropriate OS link Window Mac Create and Install NF Azure Gateway @ This section will guide a user through the steps on how to create a NF Manage Gateway in the NF Console UI and install it in the Azure vNet. Console UI Navigate to Manage Gateways Page Click on + sign in the top right corner. Click on \"Create Gateway\" on the Azure Cloud Gateway Card Fill in the required information and click on \"Create\" Copy the Client Registration Key Click on \"Deploy to Microsoft Azure\". It will take you to the Azure Portal and ask you for your login credentials. You will be presented with the template that needs to be filled. The first section is the Basics regarding your Subscription and Resource Group this gateway will be deployed in. The second section related to resources associated with this gateway. e.g. vm name, ip address space, security groups, etc. you will paste the registration key copied in step 5. You will also need the public ssh key to use for access to this gateway remotely. You will need to agree to Azure Marketplace Terms and Conditions and click to \"Purchase\" to continue. If the NF Gateway was deployed successfully. Here is the view of the Resource Group and NF Conole UI. Done Create Service @ This section will guide a user through the steps on how to create a NF Service. Console UI Navigate to Manage Services Page under Manage Appwans Click on + sign in the top right corner. Click on \"Create an IP Host Service\" Fill in the required information for SSH and click on \"Create\" If successfully, the service is green. Done Create AppWan @ This section will guide a user through the steps on how to enable service connectivity to users by creating an appwan. Console UI Navigate to Manage AppWANS Page under Manage Appwans Click on + sign in the top right corner. Click on \"Component Builder Appwan\" Moved the desired client (e.g. DemoClient01) from \"Available\" Clients to \"Selected\" Endpoints. Moved the desired service (e.g. DemoClient01) from \"Available\" to \"Selected\" Services. Click on \"Create\". Done Programmatically @ via REST API (Python) @ Note For the code clarity, we have broken down the code into multiple Python modules NF REST CRUD (Create,Read, Update and Delete) operations Get MOP Session Token Create NF Network Create NF Gateway(s) Create NF Service(s) Create NF AppWan(s) Wrapper Script to Create NF Resources based on Resource yaml file To obtain a session token, the MOP Session Token script parses a configuration file for clientId, and secretId if they are not passed to it through the positional arguments (env, clientId, secretId). It must be located in the home directory under '~/.env' . Additionally, we created the Terraform module ( main.tf and variables.tf ) for Azure to aid the deployment of gateway(s) into Azure vNet(s). We created the Terraform Python modules ( nf_tf_main_file.py and nf_tf_modules.py ) that the python wrapper, script based on Resource yaml file, calls them to create the Terraform plan main file in the working directory, and then applies it using the Terraform module. Assumption, the network named DemoNet01 has already been created. If not network action would need to be \"create\" not \"get\". The \"get\" action just means that the network ID will be search based on the name provided and use to add gateways to. The new Resource Group in Azure will be created named \"demoPythonTerraform01\" if one does not exists already in the same region (e.g. centralus). A new vnet will be created and NF Gateway will be placed in it. Environment means the NF Console Environment used, not Azure. via REST API (Python) Clone this repo (git clone https://github.com/netfoundry/mop.git) Update Resource yaml file with the desired options to feed into the wrapper script as described in the following code snippet. All Resource.yml Options Run this from the root folder to create GW in NF Console UI and Azure. python3 quickstarts / docs / python / nf_resources . py -- file quickstarts / docs / python / nf_resources . yml Required Configuration Parameters for Gateway Creation environment : production network_action : get network_name : DemoNet01 gateway_list : - action : create cloud : azure count : 1 names : [] region : westus regionalCidr : [ 10.20.10.0/24 ] regkeys : [] resourceGroup : name : demoPythonTerraform01 region : centralus tag : TerraformDemo terraform : bin : terraform output : 'no' source : ./quickstarts/docs/terraform work_dir : . After the script is run successfully, one can see that the gateway name and registration key were saved Resource.yml file. The nam eis created automatically based on region and gateway type (AZCPEGW means an azure type gateway in NF console). environment : production gateway_list : - action : create cloud : azure count : 1 names : - AZCPEGW-0-WESTUS region : westus regionalCidr : - 10.20.10.0/24 regkeys : - 21DB86724EC3F31C11C1C9D68CE5ECD6A06F057E resourceGroup : name : demoPythonTerraform01 region : centralus tag : TerraformDemo network_action : get network_name : DemoNet01 terraform : bin : terraform output : 'no' source : ./quickstarts/docs/terraform work_dir : . Create a test server vm on the same vNet if not already present. Update the Resoure.yaml file to include the Service option to create the NF service on the gateway create in the previous step. make sure to change the action on the gateway to \"get\". environment : production gateway_list : - action : get cloud : azure count : 1 names : - AZCPEGW-0-WESTUS region : westus regionalCidr : - 10.20.10.0/24 regkeys : - 21DB86724EC3F31C11C1C9D68CE5ECD6A06F057E resourceGroup : name : demoPythonTerraform01 region : centralus tag : TerraformDemo network_action : get network_name : DemoNet01 terraform : bin : terraform output : 'no' source : ./quickstarts/docs/terraform work_dir : . services : - action : create gateway : AZCPEGW-0-WESTUS ip : 10.20.10.5 port : 22 name : type : host After the script ran again successfully, the service section should have been populated with the service name as so. services : - action : create gateway : AZCPEGW-0-WESTUS ip : 10.20.10.5 name : AZCPEGW-0-WESTUS--10.20.10.5--22 port : 22 type : host Create a client endpoint if not already done so. Update the Resoure.yaml file to include the AppWan option to create the NF AppWan tying the gateway, clinet and service created in the previous steps. Make sure to change the action on the service to \"get\". environment : production gateway_list : - action : get cloud : azure count : 1 names : - AZCPEGW-0-WESTUS region : westus regionalCidr : - 10.20.10.0/24 regkeys : - 21DB86724EC3F31C11C1C9D68CE5ECD6A06F057E resourceGroup : name : demoPythonTerraform01 region : centralus tag : TerraformDemo network_action : get network_name : DemoNet01 services : - action : get gateway : AZCPEGW-0-WESTUS ip : 10.20.10.5 name : AZCPEGW-0-WESTUS--10.20.10.5--22 port : 22 type : host terraform : bin : terraform output : 'no' source : ./quickstarts/docs/terraform work_dir : . appwans : - action : create endpoints : - AZCPEGW-0-WESTUS - DemoClient01 name : appwan-ssh-22 services : - AZCPEGW-0-WESTUS--10.20.10.5 After the script ran again successfully, the connectivity should have been up. To test connectivity, log in to the DemoClinet01 and run ssh \"username\"@\"privateIp\" To delete resources created, just follow the reverse order. First AppWans appwans : - action : delete endpoints : - AZCPEGW-0-WESTUS - DemoClient01 name : null services : - AZCPEGW-0-WESTUS--10.20.10.5--22 Then services services : - action : delete gateway : AZCPEGW-0-WESTUS ip : 10.20.10.5 name : null port : 22 type : host Endpoints - will delete all resources in Azure as well. gateway_list : - action : delete cloud : azure count : 1 names : [] region : westus regionalCidr : - 10.20.10.0/24 regkeys : [] resourceGroup : name : demoPythonTerraform01 region : centralus tag : TerraformDemo Network environment : production network_action : delete network_name : DemoNet01","title":"User to Cloud Application Connection"},{"location":"azure/connectUser2App/#user_to_cloud_application_connection","text":"This quickstart guide will provide all the steps to create a secure service between a user and an application hosted in Azure Cloud using NetFoundry Overlay Fabric (NFOF). Important Assumption is that the NF Fabric is already up and the NF Client is installed.","title":"User to Cloud Application Connection"},{"location":"azure/connectUser2App/#through_nf_web_console_ui","text":"","title":"Through NF Web Console UI"},{"location":"azure/connectUser2App/#create_and_install_nf_client","text":"This section will guide a user through the steps on how to createaal the a client in the NF Console UI. Then, it will provide links to Guides on how to install the NetFoundry Client Software for Windows and MAC Clients, including the registration with the NF Network Fabric. Console UI Navigate to Manage Clients Page Click on + sign in the top right corner. Fill in the required information and click on \"Create\" Copy the Client Registration Key Install the NF Client Software by following the directions at the appropriate OS link Window Mac","title":"Create and install NF Client"},{"location":"azure/connectUser2App/#create_and_install_nf_azure_gateway","text":"This section will guide a user through the steps on how to create a NF Manage Gateway in the NF Console UI and install it in the Azure vNet. Console UI Navigate to Manage Gateways Page Click on + sign in the top right corner. Click on \"Create Gateway\" on the Azure Cloud Gateway Card Fill in the required information and click on \"Create\" Copy the Client Registration Key Click on \"Deploy to Microsoft Azure\". It will take you to the Azure Portal and ask you for your login credentials. You will be presented with the template that needs to be filled. The first section is the Basics regarding your Subscription and Resource Group this gateway will be deployed in. The second section related to resources associated with this gateway. e.g. vm name, ip address space, security groups, etc. you will paste the registration key copied in step 5. You will also need the public ssh key to use for access to this gateway remotely. You will need to agree to Azure Marketplace Terms and Conditions and click to \"Purchase\" to continue. If the NF Gateway was deployed successfully. Here is the view of the Resource Group and NF Conole UI. Done","title":"Create and Install NF Azure Gateway"},{"location":"azure/connectUser2App/#create_service","text":"This section will guide a user through the steps on how to create a NF Service. Console UI Navigate to Manage Services Page under Manage Appwans Click on + sign in the top right corner. Click on \"Create an IP Host Service\" Fill in the required information for SSH and click on \"Create\" If successfully, the service is green. Done","title":"Create Service"},{"location":"azure/connectUser2App/#create_appwan","text":"This section will guide a user through the steps on how to enable service connectivity to users by creating an appwan. Console UI Navigate to Manage AppWANS Page under Manage Appwans Click on + sign in the top right corner. Click on \"Component Builder Appwan\" Moved the desired client (e.g. DemoClient01) from \"Available\" Clients to \"Selected\" Endpoints. Moved the desired service (e.g. DemoClient01) from \"Available\" to \"Selected\" Services. Click on \"Create\". Done","title":"Create AppWan"},{"location":"azure/connectUser2App/#programmatically","text":"","title":"Programmatically"},{"location":"azure/connectUser2App/#via_rest_api_python","text":"Note For the code clarity, we have broken down the code into multiple Python modules NF REST CRUD (Create,Read, Update and Delete) operations Get MOP Session Token Create NF Network Create NF Gateway(s) Create NF Service(s) Create NF AppWan(s) Wrapper Script to Create NF Resources based on Resource yaml file To obtain a session token, the MOP Session Token script parses a configuration file for clientId, and secretId if they are not passed to it through the positional arguments (env, clientId, secretId). It must be located in the home directory under '~/.env' . Additionally, we created the Terraform module ( main.tf and variables.tf ) for Azure to aid the deployment of gateway(s) into Azure vNet(s). We created the Terraform Python modules ( nf_tf_main_file.py and nf_tf_modules.py ) that the python wrapper, script based on Resource yaml file, calls them to create the Terraform plan main file in the working directory, and then applies it using the Terraform module. Assumption, the network named DemoNet01 has already been created. If not network action would need to be \"create\" not \"get\". The \"get\" action just means that the network ID will be search based on the name provided and use to add gateways to. The new Resource Group in Azure will be created named \"demoPythonTerraform01\" if one does not exists already in the same region (e.g. centralus). A new vnet will be created and NF Gateway will be placed in it. Environment means the NF Console Environment used, not Azure. via REST API (Python) Clone this repo (git clone https://github.com/netfoundry/mop.git) Update Resource yaml file with the desired options to feed into the wrapper script as described in the following code snippet. All Resource.yml Options Run this from the root folder to create GW in NF Console UI and Azure. python3 quickstarts / docs / python / nf_resources . py -- file quickstarts / docs / python / nf_resources . yml Required Configuration Parameters for Gateway Creation environment : production network_action : get network_name : DemoNet01 gateway_list : - action : create cloud : azure count : 1 names : [] region : westus regionalCidr : [ 10.20.10.0/24 ] regkeys : [] resourceGroup : name : demoPythonTerraform01 region : centralus tag : TerraformDemo terraform : bin : terraform output : 'no' source : ./quickstarts/docs/terraform work_dir : . After the script is run successfully, one can see that the gateway name and registration key were saved Resource.yml file. The nam eis created automatically based on region and gateway type (AZCPEGW means an azure type gateway in NF console). environment : production gateway_list : - action : create cloud : azure count : 1 names : - AZCPEGW-0-WESTUS region : westus regionalCidr : - 10.20.10.0/24 regkeys : - 21DB86724EC3F31C11C1C9D68CE5ECD6A06F057E resourceGroup : name : demoPythonTerraform01 region : centralus tag : TerraformDemo network_action : get network_name : DemoNet01 terraform : bin : terraform output : 'no' source : ./quickstarts/docs/terraform work_dir : . Create a test server vm on the same vNet if not already present. Update the Resoure.yaml file to include the Service option to create the NF service on the gateway create in the previous step. make sure to change the action on the gateway to \"get\". environment : production gateway_list : - action : get cloud : azure count : 1 names : - AZCPEGW-0-WESTUS region : westus regionalCidr : - 10.20.10.0/24 regkeys : - 21DB86724EC3F31C11C1C9D68CE5ECD6A06F057E resourceGroup : name : demoPythonTerraform01 region : centralus tag : TerraformDemo network_action : get network_name : DemoNet01 terraform : bin : terraform output : 'no' source : ./quickstarts/docs/terraform work_dir : . services : - action : create gateway : AZCPEGW-0-WESTUS ip : 10.20.10.5 port : 22 name : type : host After the script ran again successfully, the service section should have been populated with the service name as so. services : - action : create gateway : AZCPEGW-0-WESTUS ip : 10.20.10.5 name : AZCPEGW-0-WESTUS--10.20.10.5--22 port : 22 type : host Create a client endpoint if not already done so. Update the Resoure.yaml file to include the AppWan option to create the NF AppWan tying the gateway, clinet and service created in the previous steps. Make sure to change the action on the service to \"get\". environment : production gateway_list : - action : get cloud : azure count : 1 names : - AZCPEGW-0-WESTUS region : westus regionalCidr : - 10.20.10.0/24 regkeys : - 21DB86724EC3F31C11C1C9D68CE5ECD6A06F057E resourceGroup : name : demoPythonTerraform01 region : centralus tag : TerraformDemo network_action : get network_name : DemoNet01 services : - action : get gateway : AZCPEGW-0-WESTUS ip : 10.20.10.5 name : AZCPEGW-0-WESTUS--10.20.10.5--22 port : 22 type : host terraform : bin : terraform output : 'no' source : ./quickstarts/docs/terraform work_dir : . appwans : - action : create endpoints : - AZCPEGW-0-WESTUS - DemoClient01 name : appwan-ssh-22 services : - AZCPEGW-0-WESTUS--10.20.10.5 After the script ran again successfully, the connectivity should have been up. To test connectivity, log in to the DemoClinet01 and run ssh \"username\"@\"privateIp\" To delete resources created, just follow the reverse order. First AppWans appwans : - action : delete endpoints : - AZCPEGW-0-WESTUS - DemoClient01 name : null services : - AZCPEGW-0-WESTUS--10.20.10.5--22 Then services services : - action : delete gateway : AZCPEGW-0-WESTUS ip : 10.20.10.5 name : null port : 22 type : host Endpoints - will delete all resources in Azure as well. gateway_list : - action : delete cloud : azure count : 1 names : [] region : westus regionalCidr : - 10.20.10.0/24 regkeys : [] resourceGroup : name : demoPythonTerraform01 region : centralus tag : TerraformDemo Network environment : production network_action : delete network_name : DemoNet01","title":"via REST API (Python)"},{"location":"azure/intro/","text":"Use Case Overview @ Users can reach application located in Azure's Private vNets over Internet using secure tunnels from anywhere users have connections to the Internet as depicted in the diagram. Note The tunnels are encrypted and user-app or app-app sessions are hashed across 3 diverse paths by default. Use Case Diagram @","title":"Use Case Overview"},{"location":"azure/intro/#use_case_overview","text":"Users can reach application located in Azure's Private vNets over Internet using secure tunnels from anywhere users have connections to the Internet as depicted in the diagram. Note The tunnels are encrypted and user-app or app-app sessions are hashed across 3 diverse paths by default.","title":"Use Case Overview"},{"location":"azure/intro/#use_case_diagram","text":"","title":"Use Case Diagram"},{"location":"netfoundry/client/","text":"Overview @ One can find all the details needed to deploy NF Endpoint App on various Operating systems using the links below. Introduction to Client Endpoints NetFoundry Client FAQ Troubleshoot Client and Gateway Registration Errors","title":"NF Clients"},{"location":"netfoundry/client/#overview","text":"One can find all the details needed to deploy NF Endpoint App on various Operating systems using the links below. Introduction to Client Endpoints NetFoundry Client FAQ Troubleshoot Client and Gateway Registration Errors","title":"Overview"},{"location":"netfoundry/fabric/","text":"Overview @ This section will show how to do that through NF Console , and programatically using NF Orchestration's APIs via Console UI @ Click on Network Menu Click on \"+\" button in the top right corner to create a network Give it a name, e.g. \"DemoNet01\" Wait until the icon network turns green. Done via REST API (Python) @ Note For the code clarity, we have broken down the code into multiple Python modules NF REST CRUD (Create,Read, Update and Delete) operations Get MOP Session Token Create NF Network Wrapper Script to Create NF Resources based on Resource yaml file To obtain a session token, the MOP Session Token script parses a configuration file for clientId, and secretId if they are not passed to it through the positional arguments (env, clientId, secretId). It must be located in the home directory under '~/.env' Clone this repo (git clone https://github.com/netfoundry/mop.git) Update Resource yaml file with the desired options to feed into the wrapper script as described in the following code snippet. Run this from the root folder python3 quickstarts / docs / python / nf_resources . py -- file quickstarts / docs / python / nf_resources . yml Required Configuration Paramters environment : { NF Console Environment , e.g. Production } network_action : { e.g. create , get , delete } network_name : { e.g. DemoNet01 } Done Note The logs will be outputted to the log file named logoutput.txt under the home directory '~/'.","title":"NF Fabric"},{"location":"netfoundry/fabric/#overview","text":"This section will show how to do that through NF Console , and programatically using NF Orchestration's APIs","title":"Overview"},{"location":"netfoundry/fabric/#via_console_ui","text":"Click on Network Menu Click on \"+\" button in the top right corner to create a network Give it a name, e.g. \"DemoNet01\" Wait until the icon network turns green. Done","title":"via Console UI"},{"location":"netfoundry/fabric/#via_rest_api_python","text":"Note For the code clarity, we have broken down the code into multiple Python modules NF REST CRUD (Create,Read, Update and Delete) operations Get MOP Session Token Create NF Network Wrapper Script to Create NF Resources based on Resource yaml file To obtain a session token, the MOP Session Token script parses a configuration file for clientId, and secretId if they are not passed to it through the positional arguments (env, clientId, secretId). It must be located in the home directory under '~/.env' Clone this repo (git clone https://github.com/netfoundry/mop.git) Update Resource yaml file with the desired options to feed into the wrapper script as described in the following code snippet. Run this from the root folder python3 quickstarts / docs / python / nf_resources . py -- file quickstarts / docs / python / nf_resources . yml Required Configuration Paramters environment : { NF Console Environment , e.g. Production } network_action : { e.g. create , get , delete } network_name : { e.g. DemoNet01 } Done Note The logs will be outputted to the log file named logoutput.txt under the home directory '~/'.","title":"via REST API (Python)"},{"location":"netfoundry/gateway/","text":"Overview @ One can find all the details needed to deploy NF Gateway Appliance on various Virtualization Hypervisors using the links below. Introduction to Gateway Endpoints NetFoundry Client FAQ Troubleshoot Client and Gateway Registration Errors","title":"NF Gateways"},{"location":"netfoundry/gateway/#overview","text":"One can find all the details needed to deploy NF Gateway Appliance on various Virtualization Hypervisors using the links below. Introduction to Gateway Endpoints NetFoundry Client FAQ Troubleshoot Client and Gateway Registration Errors","title":"Overview"},{"location":"netfoundry/intro/","text":"This section will provide details on how to deploy NF Network Fabric and its components. It will also provide all the details needed to deploy the edge NF app on various Operation Systems or appliance on various Virtualization Hypervisors to connect and authenticate them to the NF Fabric.","title":"Overview"}]}