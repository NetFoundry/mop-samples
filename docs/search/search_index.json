{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Secure Connectivity to Cloud Applications @ Overview @ We will provide series of quickstart guides on how to quickly deploy and configure Secure Overlay Network via NetFoundry to connect Enterprise Remote Users or Branch Applications/Users to Applications located in various public or private clouds. Use cases: @ Azure Cloud Connectivity Use Case Overview Mobile User to Cloud Application Connectivity Branch Application to Cloud Application Connectivity Bastion Host Accessing Azure Stack AWS Cloud Connectivity Overview Bastion Host Google Cloud Connectivity Getting Started Guilde VCPE CPE Automation Note Regardless of where Applications Users are trying to reach reside, NetFoundry (NF) Network Fabric needs to be provisioned and deployed first. Navigate to NetFoundry/NF Fabric to find more information on how to stand up the NF Network Fabric.","title":"Home"},{"location":"#secure_connectivity_to_cloud_applications","text":"","title":"Secure Connectivity to Cloud Applications"},{"location":"#overview","text":"We will provide series of quickstart guides on how to quickly deploy and configure Secure Overlay Network via NetFoundry to connect Enterprise Remote Users or Branch Applications/Users to Applications located in various public or private clouds.","title":"Overview"},{"location":"#use_cases","text":"Azure Cloud Connectivity Use Case Overview Mobile User to Cloud Application Connectivity Branch Application to Cloud Application Connectivity Bastion Host Accessing Azure Stack AWS Cloud Connectivity Overview Bastion Host Google Cloud Connectivity Getting Started Guilde VCPE CPE Automation Note Regardless of where Applications Users are trying to reach reside, NetFoundry (NF) Network Fabric needs to be provisioned and deployed first. Navigate to NetFoundry/NF Fabric to find more information on how to stand up the NF Network Fabric.","title":"Use cases:"},{"location":"alicloud/getting-started/","text":"Overview @ This getting started guide will explain how to launch a NetFoundry application gateway in the Alibaba Cloud. Launching an instance in Alibaba Cloud @ Pre Deployment @ Important The BYOL (Bring Your Own License) licensing model is one that relies on your purchasing a software license separately from our website here and registering your appliance with generated one time key. Deployment of Appliance @ To get started, go to Elastic Compute Service , click on Create Instance . The following screen will appear. Choose the Billing Method fit your need Choose the region and zone you want your VM to deploy in Choose the instance type. We recomment at least 2 vCPUs + 4GiB Memory Choose number of Instances you want Find the Marketplace Image for NetFoundry Application Gateway Choose the size of Disk. The default size is okay. click on Next: Networking to open the next screen Make your required selection then proceed to the next page (System Configurations). Select your key pair. You must use key pair to login Change the Instance Name to your desired name Optionally enter a host name Continue to the next page to make more optional changes or hit \"Preview\" to the final page before creating the VM. Post Deployment @ Go to the virtual machine you created, and locate the public IP address of the virtual machine. Using an SSH client, log in to the machine using its public IP address as the user \"nfadmin\", using the SSH key or password specified earlier. > ssh -i [path/to/private/key] nfadmin@[public_ip_address] Once you are logged in to the gateway, run these commands to register it to your NetFoundry Network. Look for errors in the registration process output, or \"Success\" if registration completes successfully. [registration key] is the key you captured earlier. > sudo nfnreg [registration key] > sudo systemctl status dvn.service The output should report ACTIVE . It may take up to 5 minutes to register and come online. Once the Gateway Instance has started up, switch back to the NetFoundry Console and locate the Gateway Endpoint. Confirm that the status indicator is green, which means that it has successfully registered and is online. If the status indicator remains grey, then the gateway has failed to register. If it is red, the gateway has registered, but is offline. Setup is complete.","title":"Getting Started Guide"},{"location":"alicloud/getting-started/#overview","text":"This getting started guide will explain how to launch a NetFoundry application gateway in the Alibaba Cloud.","title":"Overview"},{"location":"alicloud/getting-started/#launching_an_instance_in_alibaba_cloud","text":"","title":"Launching an instance in Alibaba Cloud"},{"location":"alicloud/getting-started/#pre_deployment","text":"Important The BYOL (Bring Your Own License) licensing model is one that relies on your purchasing a software license separately from our website here and registering your appliance with generated one time key.","title":"Pre Deployment"},{"location":"alicloud/getting-started/#deployment_of_appliance","text":"To get started, go to Elastic Compute Service , click on Create Instance . The following screen will appear. Choose the Billing Method fit your need Choose the region and zone you want your VM to deploy in Choose the instance type. We recomment at least 2 vCPUs + 4GiB Memory Choose number of Instances you want Find the Marketplace Image for NetFoundry Application Gateway Choose the size of Disk. The default size is okay. click on Next: Networking to open the next screen Make your required selection then proceed to the next page (System Configurations). Select your key pair. You must use key pair to login Change the Instance Name to your desired name Optionally enter a host name Continue to the next page to make more optional changes or hit \"Preview\" to the final page before creating the VM.","title":"Deployment of Appliance"},{"location":"alicloud/getting-started/#post_deployment","text":"Go to the virtual machine you created, and locate the public IP address of the virtual machine. Using an SSH client, log in to the machine using its public IP address as the user \"nfadmin\", using the SSH key or password specified earlier. > ssh -i [path/to/private/key] nfadmin@[public_ip_address] Once you are logged in to the gateway, run these commands to register it to your NetFoundry Network. Look for errors in the registration process output, or \"Success\" if registration completes successfully. [registration key] is the key you captured earlier. > sudo nfnreg [registration key] > sudo systemctl status dvn.service The output should report ACTIVE . It may take up to 5 minutes to register and come online. Once the Gateway Instance has started up, switch back to the NetFoundry Console and locate the Gateway Endpoint. Confirm that the status indicator is green, which means that it has successfully registered and is online. If the status indicator remains grey, then the gateway has failed to register. If it is red, the gateway has registered, but is offline. Setup is complete.","title":"Post Deployment"},{"location":"alicloud/intro/","text":"Use Case Overview @ Users can reach application located in AliCloud's private subnets over Internet using secure tunnels from anywhere users have connections to the Internet as depicted in the diagram. Note The tunnels are encrypted and user-app sessions are hashed across 3 diverse paths by default. Use Case Diagram @","title":"Overview"},{"location":"alicloud/intro/#use_case_overview","text":"Users can reach application located in AliCloud's private subnets over Internet using secure tunnels from anywhere users have connections to the Internet as depicted in the diagram. Note The tunnels are encrypted and user-app sessions are hashed across 3 diverse paths by default.","title":"Use Case Overview"},{"location":"alicloud/intro/#use_case_diagram","text":"","title":"Use Case Diagram"},{"location":"alicloud/user-guild/","text":"1 Create a Gateway VM on the Alicloud ECS @ Create a VM with the Netfoundry Application Gateway offering from the Alicloud Marketplace You must use sshkey pair to create the VM 2 Setup the Gateway @ 2.1 Create a Gateway in the NetFoundry Console @ Sign in to your NetFoundry organization at (https://nfconsole.io). If you don't have an account yet, you can sign up for free trial. Navigate to the Gateways page and create a new gateway. Give it a name and location, then click the Create button; Take note of the registration key. You will need it to register the gateway later. 2.2 Register the gateway with your NetFoundry Network @ Go to the virtual machine you created, and locate the public IP address of the virtual machine. Using an SSH client, log in to the machine using its public IP address as the user \"nfadmin\", using the SSH key or password specified earlier. > ssh -i [path/to/private/key] nfadmin@[public_ip_address] Once you are logged in to the gateway, run these commands to register it to your NetFoundry Network. Look for errors in the registration process output, or \"Success\" if registration completes successfully. [registration key] is the key you captured earlier. > sudo nfnreg [registration key] > sudo systemctl status dvn.service The output should report ACTIVE . It may take up to 5 minutes to register and come online. Once the Gateway Instance has started up, switch back to the NetFoundry Console and locate the Gateway Endpoint. Confirm that the status indicator is green, which means that it has successfully registered and is online. If the status indicator remains grey, then the gateway has failed to register. If it is red, the gateway has registered, but is offline. 3 An Example Service provided by our product @ Here is an example on how to reach the server on the Alibaba Cloud by using the AppWan provisioning on the NetFoundry Console. In this example, we are going to assume the client you are using to connect to the server is called NFCLIENT1 . On the NFCONSOLE, choose MANAGE APPWANS button. On the MANAGE APPWANS screen, hit the + button. Choose SIMPLE CLOUD APPWAN , a form will display for you to create the AppWAN. 1 Fill in the Application Name (Examples can be: Access AliCloud GW1, Access Webpage) 2 Choose your Gateway 3 Fill in the Connection information. This is where you want the traffic to go once it reaches your gateway (in our example, we fill in a subnet: 192.168.2.0/24) 4 Add your client to the APPWAN Hit Create your APPWAN , and your AppWAN will be created. Once the AppWAN is created, your client NFCLIENT1 should be able to access the network \u201c192.168.2.0/24\u201d via the Gateway you just created.","title":"User Guide"},{"location":"alicloud/user-guild/#1_create_a_gateway_vm_on_the_alicloud_ecs","text":"Create a VM with the Netfoundry Application Gateway offering from the Alicloud Marketplace You must use sshkey pair to create the VM","title":"1 Create a Gateway VM on the Alicloud ECS"},{"location":"alicloud/user-guild/#2_setup_the_gateway","text":"","title":"2 Setup the Gateway"},{"location":"alicloud/user-guild/#21_create_a_gateway_in_the_netfoundry_console","text":"Sign in to your NetFoundry organization at (https://nfconsole.io). If you don't have an account yet, you can sign up for free trial. Navigate to the Gateways page and create a new gateway. Give it a name and location, then click the Create button; Take note of the registration key. You will need it to register the gateway later.","title":"2.1 Create a Gateway in the NetFoundry Console"},{"location":"alicloud/user-guild/#22_register_the_gateway_with_your_netfoundry_network","text":"Go to the virtual machine you created, and locate the public IP address of the virtual machine. Using an SSH client, log in to the machine using its public IP address as the user \"nfadmin\", using the SSH key or password specified earlier. > ssh -i [path/to/private/key] nfadmin@[public_ip_address] Once you are logged in to the gateway, run these commands to register it to your NetFoundry Network. Look for errors in the registration process output, or \"Success\" if registration completes successfully. [registration key] is the key you captured earlier. > sudo nfnreg [registration key] > sudo systemctl status dvn.service The output should report ACTIVE . It may take up to 5 minutes to register and come online. Once the Gateway Instance has started up, switch back to the NetFoundry Console and locate the Gateway Endpoint. Confirm that the status indicator is green, which means that it has successfully registered and is online. If the status indicator remains grey, then the gateway has failed to register. If it is red, the gateway has registered, but is offline.","title":"2.2 Register the gateway with your NetFoundry Network"},{"location":"alicloud/user-guild/#3_an_example_service_provided_by_our_product","text":"Here is an example on how to reach the server on the Alibaba Cloud by using the AppWan provisioning on the NetFoundry Console. In this example, we are going to assume the client you are using to connect to the server is called NFCLIENT1 . On the NFCONSOLE, choose MANAGE APPWANS button. On the MANAGE APPWANS screen, hit the + button. Choose SIMPLE CLOUD APPWAN , a form will display for you to create the AppWAN. 1 Fill in the Application Name (Examples can be: Access AliCloud GW1, Access Webpage) 2 Choose your Gateway 3 Fill in the Connection information. This is where you want the traffic to go once it reaches your gateway (in our example, we fill in a subnet: 192.168.2.0/24) 4 Add your client to the APPWAN Hit Create your APPWAN , and your AppWAN will be created. Once the AppWAN is created, your client NFCLIENT1 should be able to access the network \u201c192.168.2.0/24\u201d via the Gateway you just created.","title":"3 An Example Service provided by our product"},{"location":"ansible/","text":"Ansible Roles for Jenkins Pipelines @ Created for Regression Testing of NetFoundry Features, e.g. AVW VPN Sit Creation, Ziti Edge Developer Edition Image. 1. AVW VPN Site Testing Specific Roles: 1. customer-router: simulating a customer router that would peer with NF gateway acting as a AVW VPN Site in a Customer Branch DC 1. frr - a role that configures BGP Routing Agent on the simulated customer router. 1. test-case-01 - test cases that verify that AVW VPN Site Creation through NF MOP Console works as expected. 1. ZEDE Specific Roles 1. zede-client: simulating a client endpoint where a Ziti Tunneler is run 1. zede: VM created from ZEDE image 1. zede-tc-01: test cases to verify that the ZEDE image was build successfully. 1. Shared Roles 1. app-server: simulating a server where the app is run, e.g. webserver, iperf3 performance tool","title":"Ansible Roles for Jenkins Pipelines"},{"location":"ansible/#ansible_roles_for_jenkins_pipelines","text":"Created for Regression Testing of NetFoundry Features, e.g. AVW VPN Sit Creation, Ziti Edge Developer Edition Image. 1. AVW VPN Site Testing Specific Roles: 1. customer-router: simulating a customer router that would peer with NF gateway acting as a AVW VPN Site in a Customer Branch DC 1. frr - a role that configures BGP Routing Agent on the simulated customer router. 1. test-case-01 - test cases that verify that AVW VPN Site Creation through NF MOP Console works as expected. 1. ZEDE Specific Roles 1. zede-client: simulating a client endpoint where a Ziti Tunneler is run 1. zede: VM created from ZEDE image 1. zede-tc-01: test cases to verify that the ZEDE image was build successfully. 1. Shared Roles 1. app-server: simulating a server where the app is run, e.g. webserver, iperf3 performance tool","title":"Ansible Roles for Jenkins Pipelines"},{"location":"api/overview/","text":"Welcome to the API Section @ In order to gain access to the NetFoundry system via API you need to create a ClientId and ClientSecret using the console. Here is how to get clientId and secret from NFconsole. login to nfconsole ->organization->Manage API account-> click '+' sign to create one. provide the required details and click on generate token. Copy the clientID and secret and save it securely. . Please visit the NetFoundry Developer Portal to learn more about the NetFoundry API.","title":"Overview"},{"location":"api/overview/#welcome_to_the_api_section","text":"In order to gain access to the NetFoundry system via API you need to create a ClientId and ClientSecret using the console. Here is how to get clientId and secret from NFconsole. login to nfconsole ->organization->Manage API account-> click '+' sign to create one. provide the required details and click on generate token. Copy the clientID and secret and save it securely. . Please visit the NetFoundry Developer Portal to learn more about the NetFoundry API.","title":"Welcome to the API Section"},{"location":"api/bash/overview/","text":"","title":"Overview"},{"location":"api/powershell/getting-started/","text":"This section provides the powershell code to spin up a NF client with the name as computer name fetched by PS script. Example Here are the parameters used in the script few needs to be changed to suit your need for eg. network_name and region_ name. clientId /secret : from NF console steps below. environment : Production network_name : e.g. DemoNet01 audience : URI for the Auth0 api_endpoint : URI for the API calls region_name : The region_name is the reference region or location where client will be created (reference closest AWS location) e.g.us-east-1 provider : AWS To create a unique client we can use second half of computer name below powershell cmdlet will fetch the same. #Set Endpoint name to second half of computer name: $endpoint_name = $ENV:COMPUTERNAME . Split ( \"-\" )[- 1 ] This section creates an access token by an api call using parameters defined earlier. # Get a auth token from Auth0 $auth_payload = @{ client_id = $client_id client_secret = $client_secret audience = $audience grant_type = 'client_credentials' } $auth_json = $auth_payload | ConvertTo-Json $post_uri = \"https://netfoundry-\" + $environment + \".auth0.com/oauth/token\" $auth0_response = Invoke-RestMethod -Method Post -Uri $post_uri -ContentType 'application/json' -Body $auth_json $token = $auth0_response . access_token #Inserting auth token to headers for API calls $headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\" $headers . add ( \"Authorization\" , ( \"Bearer \" + $token )) This is how to get datacenterId and networkId which basically makes an API call to strips off unwanted information. This information will be used to create client later. # Get a dataCenter ID: $datacenter_uri = $api_endpoint + \"/dataCenters\" $dataCenter_response = Invoke-RestMethod -Method Get -Uri $datacenter_uri -ContentType 'application/json' -Headers $headers $dataCenter = $dataCenter_response . _embedded . dataCenters | where { $_ . locationCode -like $region_name -and $_ . provider -like $provider } | select _links $dataCenterId = ( $dataCenter . _links . self . href ). Split ( \"/\" )[- 1 ] # Get a Network ID: $network_uri = $api_endpoint + \"/networks\" $network_response = Invoke-RestMethod -Method Get -Uri $network_uri -ContentType 'application/json' -Headers $headers $network = $network_response . _embedded . networks | where { $_ . name -like $network_name } | select _links $networkrId = ( $network . _links . self . href ). Split ( \"/\" )[- 1 ] Below section of the script uses computername, networkId and datacenterId from above sections to make API call create a NF client and fetch the regitration key. # Create an Endpoint & get reg key $endpoint_uri = $api_endpoint + \"/networks/\" + $networkrId + \"/endpoints\" $endpoint_payload = @{ name = $endpoint_name endpointType = \"CL\" dataCenterId = $dataCenterId } $endpoint_json = $endpoint_payload | ConvertTo-Json $endpoint_response = Invoke-RestMethod -Method Post -Uri $endpoint_uri -ContentType 'application/json' -Body $endpoint_json -Headers $headers $endpoint_registration_key = $endpoint_response . registrationKey This section will run a registration script silently to register the NF client. # Run registration script Start-Process -FilePath C : \\ \"Program Files\" \\ DVN \\ vtc_app \\ nfnreg $endpoint_registration_key Here is full script PS script","title":"Getting Started"},{"location":"api/powershell/overview/","text":"This is an overview to provide details on how to create NF client,get the registration key and register using powershell. This assume the following prerequisites. Powershell knowledge. Clientid. Client secret. Network name. Geo region id.","title":"Overview"},{"location":"api/python/overview/","text":"Welcome to the Python Scripts of the API Section @ The NetFoundry folder contains source python code for wrapper scripts that can manage NetFoundry Resources through NF Console API Gateway. These scripts are utilized by various Quickstart Guides in this repo. The Azure folder contains source python code for wrapper scripts to manges resources in Azure RG. These scripts are used by the AWV Packet Test Jenkins Pipeline.","title":"Overview"},{"location":"api/python/overview/#welcome_to_the_python_scripts_of_the_api_section","text":"The NetFoundry folder contains source python code for wrapper scripts that can manage NetFoundry Resources through NF Console API Gateway. These scripts are utilized by various Quickstart Guides in this repo. The Azure folder contains source python code for wrapper scripts to manges resources in Azure RG. These scripts are used by the AWV Packet Test Jenkins Pipeline.","title":"Welcome to the Python Scripts of the API Section"},{"location":"aws/aws-bastion/","text":"Overview @ What is a Bastion Host? A bastion host is a server whose purpose is to provide access to a private network from an external network, such as the Internet. Because of its exposure to potential attack, it's important to lock this down as tightly as possible. How can NetFoundry Help? Deploying a bastion host setup with NetFoundry is more secure! Why? Because the bastion doesn't need to be directly accessible from outside networks. It only needs outbound access & can reside in either public or private networks. Solution Architecture @ Standard Bastion Setup @ Netfoundry @ Public @ Private @ Important Assumption is that the NF Fabric is already up and the NF Client is installed. Implement Through NF Web Console UI @ Create and install NF Client @ This section will guide a user through the steps on how to create a client in the NF Console UI. Then, it will provide links to Guides on how to install the NetFoundry Client Software for Windows and MAC Clients, including the registration with the NF Network Fabric. Console UI Navigate to Manage Clients Page Click on + sign in the top right corner. Fill in the required information and click on \"Create\" Copy the Client Registration Key Install the NF Client Software by following the directions at the appropriate OS link Window Mac Create and Install NF AWS Gateway @ This section will guide a user through the steps on how to create a NF Manage Gateway in the NF Console UI and install it in an AWS VPC. Console UI Navigate to Manage Gateways Page Click on + sign in the top right corner. Click on \"Create Gateway\" on the AWS Cloud Gateway Card Fill in the required information and click on \"Create\" Note If this is the first time you've ever launched an AWS NetFoundry Gateway You must accept the AWS license before launching the gateway, please click here: AWS Marketplace Click on \"Launch Gateway Using CloudFormation Script\". It will take you to the AWS console, if you're not already logged in it will ask you for your login credentials. You will be presented with the template parameters that needs to be filled. Fill in the AWS Parameters Section with you're VPC & ssh keyname & Click Create Stack. If the NF Gateway was deployed successfully. Here is the view of the NF Conole UI. Done Create IP Network Service @ This section will guide a user through the steps on how to create a NF Service. Console UI Navigate to Manage Services Page under Manage Appwans Click on + sign in the top right corner. Click on \"Create an IP Network Service\" Fill in the required information for the Network your wanting to access. Important Please make sure the service you want to access is behind the gateway you specify here. If successfully, the service is green. Done Create AppWan @ This section will guide a user through the steps on how to enable service connectivity to users by creating an appwan. Console UI Navigate to Manage AppWANS Page under Manage Appwans Click on + sign in the top right corner. Click on \"Component Builder Appwan\" Move the desired client (e.g. DemoClient01) from \"Available\" Clients to \"Selected\" Endpoints. Move the desired service (e.g. DemoServiceSsh) from \"Available\" to \"Selected\" Services. Click on \"Create\". Done","title":"Bastion Replacement Removal"},{"location":"aws/aws-bastion/#overview","text":"What is a Bastion Host? A bastion host is a server whose purpose is to provide access to a private network from an external network, such as the Internet. Because of its exposure to potential attack, it's important to lock this down as tightly as possible. How can NetFoundry Help? Deploying a bastion host setup with NetFoundry is more secure! Why? Because the bastion doesn't need to be directly accessible from outside networks. It only needs outbound access & can reside in either public or private networks.","title":"Overview"},{"location":"aws/aws-bastion/#solution_architecture","text":"","title":"Solution Architecture"},{"location":"aws/aws-bastion/#standard_bastion_setup","text":"","title":"Standard Bastion Setup"},{"location":"aws/aws-bastion/#netfoundry","text":"","title":"Netfoundry"},{"location":"aws/aws-bastion/#public","text":"","title":"Public"},{"location":"aws/aws-bastion/#private","text":"Important Assumption is that the NF Fabric is already up and the NF Client is installed.","title":"Private"},{"location":"aws/aws-bastion/#implement_through_nf_web_console_ui","text":"","title":"Implement Through NF Web Console UI"},{"location":"aws/aws-bastion/#create_and_install_nf_client","text":"This section will guide a user through the steps on how to create a client in the NF Console UI. Then, it will provide links to Guides on how to install the NetFoundry Client Software for Windows and MAC Clients, including the registration with the NF Network Fabric. Console UI Navigate to Manage Clients Page Click on + sign in the top right corner. Fill in the required information and click on \"Create\" Copy the Client Registration Key Install the NF Client Software by following the directions at the appropriate OS link Window Mac","title":"Create and install NF Client"},{"location":"aws/aws-bastion/#create_and_install_nf_aws_gateway","text":"This section will guide a user through the steps on how to create a NF Manage Gateway in the NF Console UI and install it in an AWS VPC. Console UI Navigate to Manage Gateways Page Click on + sign in the top right corner. Click on \"Create Gateway\" on the AWS Cloud Gateway Card Fill in the required information and click on \"Create\" Note If this is the first time you've ever launched an AWS NetFoundry Gateway You must accept the AWS license before launching the gateway, please click here: AWS Marketplace Click on \"Launch Gateway Using CloudFormation Script\". It will take you to the AWS console, if you're not already logged in it will ask you for your login credentials. You will be presented with the template parameters that needs to be filled. Fill in the AWS Parameters Section with you're VPC & ssh keyname & Click Create Stack. If the NF Gateway was deployed successfully. Here is the view of the NF Conole UI. Done","title":"Create and Install NF AWS Gateway"},{"location":"aws/aws-bastion/#create_ip_network_service","text":"This section will guide a user through the steps on how to create a NF Service. Console UI Navigate to Manage Services Page under Manage Appwans Click on + sign in the top right corner. Click on \"Create an IP Network Service\" Fill in the required information for the Network your wanting to access. Important Please make sure the service you want to access is behind the gateway you specify here. If successfully, the service is green. Done","title":"Create IP Network Service"},{"location":"aws/aws-bastion/#create_appwan","text":"This section will guide a user through the steps on how to enable service connectivity to users by creating an appwan. Console UI Navigate to Manage AppWANS Page under Manage Appwans Click on + sign in the top right corner. Click on \"Component Builder Appwan\" Move the desired client (e.g. DemoClient01) from \"Available\" Clients to \"Selected\" Endpoints. Move the desired service (e.g. DemoServiceSsh) from \"Available\" to \"Selected\" Services. Click on \"Create\". Done","title":"Create AppWan"},{"location":"aws/intro/","text":"Use Case Overview @ Users can reach application located in AWS's private subnets over Internet using secure tunnels from anywhere users have connections to the Internet as depicted in the diagram. Note The tunnels are encrypted and user-app sessions are hashed across 3 diverse paths by default. Use Case Diagram @","title":"Use Case Overview"},{"location":"aws/intro/#use_case_overview","text":"Users can reach application located in AWS's private subnets over Internet using secure tunnels from anywhere users have connections to the Internet as depicted in the diagram. Note The tunnels are encrypted and user-app sessions are hashed across 3 diverse paths by default.","title":"Use Case Overview"},{"location":"aws/intro/#use_case_diagram","text":"","title":"Use Case Diagram"},{"location":"azure/","text":"resource.yaml file options @ appwans : - action : { e.g. create , get , delete } endpoints : { list of endpoint names to be added } name : { name for the appwan } services : { list of services to be added } environment : { NF Console Environment , e.g. Production } gateway_list : - action : { e.g. create , get , delete } cloud : { public cloud , e.g. azure } count : 1 names : { empty , will be filled in by script } region : { cloud region that gateways will be deployed in } regionalCidr : { list of IP address space in Resource group } regkeys : { empty , will be filled in by script } resourceGroup : name : { Azure Resource Group name used/created } region : { Azure Resource Group region used/created } tag : { text } network_action : { e.g. create , get , delete } network_name : { network name to use } services : - action : { e.g. create , get , delete } gateway : { name of the gateway used for this service } ip : (destination ip for the service) name : { empty , automatically generated and populated by the wrapper script } port : (destination port for the service) type : { e.g. host , network; host only enabled in this script right now } terraform : bin : { path to terraform binary } output : { boolean e.g. no or yes } source : ./quickstarts/docs/terraform { where the terraform module is located e.g. azure } work_dir : . { directory where the terraform from main plan file to be installed }","title":"resource.yaml file options"},{"location":"azure/#resourceyaml_file_options","text":"appwans : - action : { e.g. create , get , delete } endpoints : { list of endpoint names to be added } name : { name for the appwan } services : { list of services to be added } environment : { NF Console Environment , e.g. Production } gateway_list : - action : { e.g. create , get , delete } cloud : { public cloud , e.g. azure } count : 1 names : { empty , will be filled in by script } region : { cloud region that gateways will be deployed in } regionalCidr : { list of IP address space in Resource group } regkeys : { empty , will be filled in by script } resourceGroup : name : { Azure Resource Group name used/created } region : { Azure Resource Group region used/created } tag : { text } network_action : { e.g. create , get , delete } network_name : { network name to use } services : - action : { e.g. create , get , delete } gateway : { name of the gateway used for this service } ip : (destination ip for the service) name : { empty , automatically generated and populated by the wrapper script } port : (destination port for the service) type : { e.g. host , network; host only enabled in this script right now } terraform : bin : { path to terraform binary } output : { boolean e.g. no or yes } source : ./quickstarts/docs/terraform { where the terraform module is located e.g. azure } work_dir : . { directory where the terraform from main plan file to be installed }","title":"resource.yaml file options"},{"location":"azure/accessing-azure-stack/","text":"1 Administrator setup @ Before the Netfoundry\u2019s \u201cApplication Connection Gateway\u201d can be consumed by the user, the administrator must download the image from Azure marketplace to the stack marketplace. There is comprehensive guide from azure stack documentation on how to make image available for the local consumption. The document can be found here: Download Azure marketplace Please locate the offering \u201cApplication Connection Gateway\u201d and make it available via download to the azure stack. Once the download is complete, the image can now be used by the local user. 2 Setup a VCPE Gateway on the Azure stack @ 2.1 Create an Azure Stack Gateway in the NetFoundry Console @ Sign in to your NetFoundry organization; Navigate to the Gateways page and create a new Azure Stack gateway. Give it a name and location, then click the Create button; Take note of the registration key. You will need it to register the gateway later. 2.2 Launch a NetFoundry Gateway Instance Inside of Your Azure Stack @ Sign in to your account on the Azure portal and go to \u2192 Resource groups. Once inside the resource group, Click the \"+ Add\" button on the toolbar. Search for \" Application Connection Gateway (Azure Stack)\". Click on the result, the description should be shown. Click the \"Create\" button to launch the wizard. Enter basics information: Enter the Username as \"nfadmin\". Important The username must be nfadmin to gain access to this gateway; ( the username restriction will be removed soon ) Click OK to continue Next page, on choosing the compute size, it varies depends on your need. We are using a 2 VCPUs and 4 GB RAM for this example. Continue to finish setup and let system bring up the VM. 2.3 Register the gateway with your NetFoundry Network @ Once the resource is created, go to the resource group & click on the virtual machine name to view the details. Locate the machine's public IP address. Using an SSH client, log in to the machine using its public IP address as the user \"nfadmin\", using the SSH key or password specified earlier. > ssh -i [path/to/private/key] nfadmin@[public_ip_address] What to do if you cannot login to the VM? It has been discovered that when using some version of Azure Stack (i.e. 1.1908.0.20) that after launching the VM, the user must reset the SSH key via the Azure console. This is accomplished by selecting the newly created VM and clicking \"reset password\" in the bottom left hand corner of the console. Here, you will find two fields to fill in; the first being the username (nfadmin), followed by the ssh key field where the user will enter the contents of their public ssh key. Once the fields are populated properly, select \"update\". Once you are logged in to the gateway, run these commands to register it to your NetFoundry Network. Look for errors in the registration process output, or \"Success\" if registration completes successfully. [registration key] is the key you captured earlier. > sudo nfnreg [registration key] > sudo systemctl status dvn.service The output should report ACTIVE . Most common causes for registration to fail are: Not having an IP assigned (correctly), Not having a working default gateway for Internet access, Not having a valid DNS resolver. It may take up to 5 minutes to register and come online. Once the Gateway Instance has started up, switch back to the NetFoundry Console and locate the Gateway Endpoint. Confirm that the status indicator is green, which means that it has successfully registered and is online. If the status indicator remains grey, then the gateway has failed to register. If it is red, the gateway has registered, but is offline. 3 Create Service to Reach the server @ Here is an example on how to reach the server on the Azure stack side by using the AppWan provisioning on the NetFoundry Console. In this example, we are going to assume the client you are using to connect to the server is called NFCLIENT1 . On the NFCONSOLE, choose MANAGE APPWANS button. On the MANAGE APPWANS screen, hit the + button. Choose CREATE APPWAN , a form will display for you to create the AppWAN. 1 Fill in the Application Name (Examples can be: Access US WEST STACK, Access Webpage) 2 Choose your GW 3 Fill in the Connection information. This is where you want the traffic to go once it reaches the Azure Stack GW (in our example, we fill in a subnet: 192.168.2.0/24) 4 Add your client to the APPWAN Hit Create your APPWAN , and your AppWAN will be created. Once the AppWAN is created, your client NFCLIENT1 should be able to access the network \u201c192.168.2.0/24\u201d via the Azure Stack GW.","title":"Accessing Azure Stack"},{"location":"azure/accessing-azure-stack/#1_administrator_setup","text":"Before the Netfoundry\u2019s \u201cApplication Connection Gateway\u201d can be consumed by the user, the administrator must download the image from Azure marketplace to the stack marketplace. There is comprehensive guide from azure stack documentation on how to make image available for the local consumption. The document can be found here: Download Azure marketplace Please locate the offering \u201cApplication Connection Gateway\u201d and make it available via download to the azure stack. Once the download is complete, the image can now be used by the local user.","title":"1 Administrator setup"},{"location":"azure/accessing-azure-stack/#2_setup_a_vcpe_gateway_on_the_azure_stack","text":"","title":"2 Setup a VCPE Gateway on the Azure stack"},{"location":"azure/accessing-azure-stack/#21_create_an_azure_stack_gateway_in_the_netfoundry_console","text":"Sign in to your NetFoundry organization; Navigate to the Gateways page and create a new Azure Stack gateway. Give it a name and location, then click the Create button; Take note of the registration key. You will need it to register the gateway later.","title":"2.1 Create an Azure Stack Gateway in the NetFoundry Console"},{"location":"azure/accessing-azure-stack/#22_launch_a_netfoundry_gateway_instance_inside_of_your_azure_stack","text":"Sign in to your account on the Azure portal and go to \u2192 Resource groups. Once inside the resource group, Click the \"+ Add\" button on the toolbar. Search for \" Application Connection Gateway (Azure Stack)\". Click on the result, the description should be shown. Click the \"Create\" button to launch the wizard. Enter basics information: Enter the Username as \"nfadmin\". Important The username must be nfadmin to gain access to this gateway; ( the username restriction will be removed soon ) Click OK to continue Next page, on choosing the compute size, it varies depends on your need. We are using a 2 VCPUs and 4 GB RAM for this example. Continue to finish setup and let system bring up the VM.","title":"2.2 Launch a NetFoundry Gateway Instance Inside of Your Azure Stack"},{"location":"azure/accessing-azure-stack/#23_register_the_gateway_with_your_netfoundry_network","text":"Once the resource is created, go to the resource group & click on the virtual machine name to view the details. Locate the machine's public IP address. Using an SSH client, log in to the machine using its public IP address as the user \"nfadmin\", using the SSH key or password specified earlier. > ssh -i [path/to/private/key] nfadmin@[public_ip_address] What to do if you cannot login to the VM? It has been discovered that when using some version of Azure Stack (i.e. 1.1908.0.20) that after launching the VM, the user must reset the SSH key via the Azure console. This is accomplished by selecting the newly created VM and clicking \"reset password\" in the bottom left hand corner of the console. Here, you will find two fields to fill in; the first being the username (nfadmin), followed by the ssh key field where the user will enter the contents of their public ssh key. Once the fields are populated properly, select \"update\". Once you are logged in to the gateway, run these commands to register it to your NetFoundry Network. Look for errors in the registration process output, or \"Success\" if registration completes successfully. [registration key] is the key you captured earlier. > sudo nfnreg [registration key] > sudo systemctl status dvn.service The output should report ACTIVE . Most common causes for registration to fail are: Not having an IP assigned (correctly), Not having a working default gateway for Internet access, Not having a valid DNS resolver. It may take up to 5 minutes to register and come online. Once the Gateway Instance has started up, switch back to the NetFoundry Console and locate the Gateway Endpoint. Confirm that the status indicator is green, which means that it has successfully registered and is online. If the status indicator remains grey, then the gateway has failed to register. If it is red, the gateway has registered, but is offline.","title":"2.3 Register the gateway with your NetFoundry Network"},{"location":"azure/accessing-azure-stack/#3_create_service_to_reach_the_server","text":"Here is an example on how to reach the server on the Azure stack side by using the AppWan provisioning on the NetFoundry Console. In this example, we are going to assume the client you are using to connect to the server is called NFCLIENT1 . On the NFCONSOLE, choose MANAGE APPWANS button. On the MANAGE APPWANS screen, hit the + button. Choose CREATE APPWAN , a form will display for you to create the AppWAN. 1 Fill in the Application Name (Examples can be: Access US WEST STACK, Access Webpage) 2 Choose your GW 3 Fill in the Connection information. This is where you want the traffic to go once it reaches the Azure Stack GW (in our example, we fill in a subnet: 192.168.2.0/24) 4 Add your client to the APPWAN Hit Create your APPWAN , and your AppWAN will be created. Once the AppWAN is created, your client NFCLIENT1 should be able to access the network \u201c192.168.2.0/24\u201d via the Azure Stack GW.","title":"3 Create Service to Reach the server"},{"location":"azure/azure-bastion/","text":"Overview @ What is a Bastion Host? A bastion host is a server whose purpose is to provide access to a private network from an external network, such as the Internet. Because of its exposure to potential attack, it's important to lock this down as tightly as possible. How can NetFoundry Help? Deploying a bastion host setup with NetFoundry is more secure! Why? Because the bastion doesn't need to be directly accessible from outside networks. It only needs outbound access & can reside in either public or private networks. Solution Architecture @ Standard Bastion Setup @ Netfoundry @ Public @ Private @ Important Assumption is that the NF Fabric is already up and the NF Client is installed. Implement Through NF Web Console UI @ Create and install NF Client @ This section will guide a user through the steps on how to create a client in the NF Console UI. Then, it will provide links to Guides on how to install the NetFoundry Client Software for Windows and MAC Clients, including the registration with the NF Network Fabric. Console UI Navigate to Manage Clients Page Click on + sign in the top right corner. Fill in the required information and click on \"Create\" Copy the Client Registration Key Install the NF Client Software by following the directions at the appropriate OS link Window Mac Create and Deploy NF Azure Gateway @ This section will guide a user through the steps on how to create a NF Manage Gateway in the NF Console UI and install it in the Azure vNet. Console UI Navigate to Manage Gateways Page Click on + sign in the top right corner. Click on \"Create Gateway\" on the Azure Cloud Gateway Card Fill in the required information and click on \"Create\" Copy the Client Registration Key Click on \"Deploy to Microsoft Azure\". It will take you to the Azure Portal and ask you for your login credentials. You will be presented with the template that needs to be filled. The first section is the Basics regarding your Subscription and Resource Group this gateway will be deployed in. The second section related to resources associated with this gateway. e.g. vm name, ip address space, security groups, etc. you will paste the registration key copied in step 5. You will also need the public ssh key to use for access to this gateway remotely. You will need to agree to Azure Marketplace Terms and Conditions and click to \"Purchase\" to continue. If the NF Gateway was deployed successfully. Here is the view of the Resource Group and NF Conole UI. Done Create IP Network Service @ This section will guide a user through the steps on how to create a NF Service. Console UI Navigate to Manage Services Page under Manage Appwans Click on + sign in the top right corner. Click on \"Create an IP Network Service\" Fill in the required information for the Network your wanting to access. Important Please make sure the service you want to access is behind the gateway you specify here. If successfully, the service is green. Done Create AppWan @ This section will guide a user through the steps on how to enable service connectivity to users by creating an appwan. Console UI Navigate to Manage AppWANS Page under Manage Appwans Click on + sign in the top right corner. Click on \"Component Builder Appwan\" Move the desired client (e.g. DemoClient01) from \"Available\" Clients to \"Selected\" Endpoints. Move the desired service (e.g. DemoServiceSsh) from \"Available\" to \"Selected\" Services. Click on \"Create\". Done","title":"Bastion Replacement Removal"},{"location":"azure/azure-bastion/#overview","text":"What is a Bastion Host? A bastion host is a server whose purpose is to provide access to a private network from an external network, such as the Internet. Because of its exposure to potential attack, it's important to lock this down as tightly as possible. How can NetFoundry Help? Deploying a bastion host setup with NetFoundry is more secure! Why? Because the bastion doesn't need to be directly accessible from outside networks. It only needs outbound access & can reside in either public or private networks.","title":"Overview"},{"location":"azure/azure-bastion/#solution_architecture","text":"","title":"Solution Architecture"},{"location":"azure/azure-bastion/#standard_bastion_setup","text":"","title":"Standard Bastion Setup"},{"location":"azure/azure-bastion/#netfoundry","text":"","title":"Netfoundry"},{"location":"azure/azure-bastion/#public","text":"","title":"Public"},{"location":"azure/azure-bastion/#private","text":"Important Assumption is that the NF Fabric is already up and the NF Client is installed.","title":"Private"},{"location":"azure/azure-bastion/#implement_through_nf_web_console_ui","text":"","title":"Implement Through NF Web Console UI"},{"location":"azure/azure-bastion/#create_and_install_nf_client","text":"This section will guide a user through the steps on how to create a client in the NF Console UI. Then, it will provide links to Guides on how to install the NetFoundry Client Software for Windows and MAC Clients, including the registration with the NF Network Fabric. Console UI Navigate to Manage Clients Page Click on + sign in the top right corner. Fill in the required information and click on \"Create\" Copy the Client Registration Key Install the NF Client Software by following the directions at the appropriate OS link Window Mac","title":"Create and install NF Client"},{"location":"azure/azure-bastion/#create_and_deploy_nf_azure_gateway","text":"This section will guide a user through the steps on how to create a NF Manage Gateway in the NF Console UI and install it in the Azure vNet. Console UI Navigate to Manage Gateways Page Click on + sign in the top right corner. Click on \"Create Gateway\" on the Azure Cloud Gateway Card Fill in the required information and click on \"Create\" Copy the Client Registration Key Click on \"Deploy to Microsoft Azure\". It will take you to the Azure Portal and ask you for your login credentials. You will be presented with the template that needs to be filled. The first section is the Basics regarding your Subscription and Resource Group this gateway will be deployed in. The second section related to resources associated with this gateway. e.g. vm name, ip address space, security groups, etc. you will paste the registration key copied in step 5. You will also need the public ssh key to use for access to this gateway remotely. You will need to agree to Azure Marketplace Terms and Conditions and click to \"Purchase\" to continue. If the NF Gateway was deployed successfully. Here is the view of the Resource Group and NF Conole UI. Done","title":"Create and Deploy NF Azure Gateway"},{"location":"azure/azure-bastion/#create_ip_network_service","text":"This section will guide a user through the steps on how to create a NF Service. Console UI Navigate to Manage Services Page under Manage Appwans Click on + sign in the top right corner. Click on \"Create an IP Network Service\" Fill in the required information for the Network your wanting to access. Important Please make sure the service you want to access is behind the gateway you specify here. If successfully, the service is green. Done","title":"Create IP Network Service"},{"location":"azure/azure-bastion/#create_appwan","text":"This section will guide a user through the steps on how to enable service connectivity to users by creating an appwan. Console UI Navigate to Manage AppWANS Page under Manage Appwans Click on + sign in the top right corner. Click on \"Component Builder Appwan\" Move the desired client (e.g. DemoClient01) from \"Available\" Clients to \"Selected\" Endpoints. Move the desired service (e.g. DemoServiceSsh) from \"Available\" to \"Selected\" Services. Click on \"Create\". Done","title":"Create AppWan"},{"location":"azure/connectApp2App/","text":"Overview @ This quickstart guide will provide all the steps to create a secure service between a branch application and/or user and an application hosted in Azure Cloud using NetFoundry Overlay Fabric (NFOF). Important Assumption is that the NF Fabric is already up. Through NF Web Console UI @ Create and Deploy NF Gateway in Branch Datacenter @ This section will guide a user through the steps on how to create a NF Manage Gateway in the NF Console UI and install it in the Branch Datacenter. Console UI Navigate to Manage Gateways Page Click on + sign in the top right corner. Click on \"Create Gateway\" on the VCPE Gateway Card Fill in the required information and click on \"Create\" Copy the Client Registration Key Click on \"Download\" button on the Installation Package Card Download the correct image for the desired Hypervisor. Follow the installation procedure linked in the description of each image type (i.e. \"Click Here\"). Once installed, login into it locally with ssh and register it using the key copied in the previous step. Run the following command sudo nfnreg \"reg key\" Once registered, one should see the gateway status turn to green in NF Console UI Done Create and Deploy NF Azure Gateway @ This section will guide a user through the steps on how to create a NF Manage Gateway in the NF Console UI and install it in the Azure vNet. Console UI Navigate to Manage Gateways Page Click on + sign in the top right corner. Click on \"Create Gateway\" on the Azure Cloud Gateway Card Fill in the required information and click on \"Create\" Copy the Client Registration Key Click on \"Deploy to Microsoft Azure\". It will take you to the Azure Portal and ask you for your login credentials. You will be presented with the template that needs to be filled. The first section is the Basics regarding your Subscription and Resource Group this gateway will be deployed in. The second section related to resources associated with this gateway. e.g. vm name, ip address space, security groups, etc. you will paste the registration key copied in step 5. You will also need the public ssh key to use for access to this gateway remotely. You will need to agree to Azure Marketplace Terms and Conditions and click to \"Purchase\" to continue. If the NF Gateway was deployed successfully. Here is the view of the Resource Group and NF Conole UI. Done Create IP Host Service @ This section will guide a user through the steps on how to create a NF Service. Console UI Navigate to Manage Services Page under Manage Appwans Click on + sign in the top right corner. Click on \"Create an IP Host Service\" Fill in the required information for SSH and click on \"Create\" If successfully, the service is green. Done Create AppWan @ This section will guide a user through the steps on how to enable service connectivity to users by creating an appwan. Console UI Navigate to Manage AppWANS Page under Manage Appwans Click on + sign in the top right corner. Click on \"Component Builder Appwan\" Move the desired gateway (e.g. DemoGateway01) from \"Available\" Gateways to \"Selected\" Endpoints. Move the desired service (e.g. DemoServiceSsh) from \"Available\" to \"Selected\" Services. Click on \"Create\". Done Test Connectivity to Application Server @ Route to vNet The private IP of NF Gateway (e.g. YourBranchGatewayName) needs to be the next hop to reach the vNet in Azure (e.g. 10.0.8.0/24). Thus, a static route will need to be configured in one of the branch routers. NF Gateway can support dynamic routing if needed (e.g.bgp, ospf) Steps Log in to a Client App Host in Branch DataCenter Run ssh username@privateIpOfServerAppHostInAzure Programmatically @ via Python and Terraform @ Python Modules For the code clarity, we have broken down the code into multiple Python modules NF REST CRUD (Create,Read, Update and Delete) operations Get MOP Session Token Create NF Network Create NF Gateway(s) Create NF Service(s) Create NF AppWan(s) Wrapper Script to Create NF Resources based on Resource yaml file Environment Setup Requirements ~/.env to store NF Credentials in (e.g. clientId, clientSecret ) to obtain a session token for NF API Export Azure Credentials (e.g, export ARM_TENANT_ID, ARM_CLIENT_ID, ARM_CLIENT_SECRET, ARM_SUBSCRIPTION_ID ) to enable resource gateway creation in Azure Resource Group via Terraform. Terraform and Python3 installed in path. Additional Information: The new Resource Group in Azure is created based on then name provided in Resource yml , if one does not exist already in the same region (e.g. centralus). The action delete gateway will delete the RG as well even if it was an existing RG. If one does not want to delete the RG, the command terraform state rm \"{tf resource name for RG}\" needs to be run before running the gateway delete step. This will ensure that the RG is not deleted. A new vNet will be created and NF Gateway will be placed in it. Environment means the NF Console Environment used (e.g. production), not Azure. Steps Clone this repo (git clone https://github.com/netfoundry/mop.git) Update Resource yaml file with the desired options to feed into the wrapper script as described in the following code snippet. All Resource.yml Options Run this from the root folder to create GW in NF Console UI and Azure. python3 quickstarts / docs / api / python / source / netfoundry / nf_resources . py -- file quickstarts / docs / api / python / etc / nf_resources . yml Required Configuration Parameters for Gateway Creation environment : production network_action : get network_name : DemoNet01 gateway_list : - action : create cloud : azure count : 1 names : [] region : westus regionalCidr : [ 10.20.10.0/24 ] regkeys : [] resourceGroup : name : demoPythonTerraform01 region : centralus tag : TerraformDemo terraform : bin : terraform output : 'no' source : ./quickstarts/docs/terraform work_dir : . After the script is run successfully, one can see that the gateway name and registration key were saved in Resource.yml file. The name is created automatically based on region and gateway type joined with x and gateway count (AZCPEGW means an azure type gateway in NF console). One can create more than one gateway in the same region by increasing the count to more than 1. environment : production gateway_list : - action : create cloud : azure count : 1 names : - AZCPEGWx0xWESTUS region : westus regionalCidr : - 10.20.10.0/24 regkeys : - 21DB86724EC3F31C11C1C9D68CE5ECD6A06F057E resourceGroup : name : demoPythonTerraform01 region : centralus tag : TerraformDemo network_action : get network_name : DemoNet01 terraform : bin : terraform output : 'no' source : ./quickstarts/docs/terraform work_dir : . Create a test server vm on the same vNet if not already present. Update the Resoure.yaml file to include the Service option to create the NF service on the gateway create in the previous step. Don't forget to change the action on the gateway to \"get\". environment : production gateway_list : - action : get cloud : azure count : 1 names : - AZCPEGWx0xWESTUS region : westus regionalCidr : - 10.20.10.0/24 regkeys : - 21DB86724EC3F31C11C1C9D68CE5ECD6A06F057E resourceGroup : name : demoPythonTerraform01 region : centralus tag : TerraformDemo network_action : get network_name : DemoNet01 terraform : bin : terraform output : 'no' source : ./quickstarts/docs/terraform work_dir : . services : - action : create gateway : AZCPEGWx0xWESTUS ip : 10.20.10.5 port : 22 name : type : host After the script run again successfully, the service section should have been populated with the service name as so. services : - action : create gateway : AZCPEGWx0xWESTUS ip : 10.20.10.5 name : AZCPEGWx0xWESTUS--10.20.10.5--22 port : 22 type : host Create a gateway in the branch as the steps in the UI section indicated . We will provide code snippets for private hypervisors deployment through python in later releases (e.g. vSphere) Update the Resoure.yaml file to include the AppWan option to create the NF AppWan tying the gateway, client and service created in the previous steps. Don't forget to change the action on the service option to \"get\". environment : production gateway_list : - action : get cloud : azure count : 1 names : - AZCPEGWx0xWESTUS region : westus regionalCidr : - 10.20.10.0/24 regkeys : - 21DB86724EC3F31C11C1C9D68CE5ECD6A06F057E resourceGroup : name : demoPythonTerraform01 region : centralus tag : TerraformDemo network_action : get network_name : DemoNet01 services : - action : get gateway : AZCPEGWx0xWESTUS ip : 10.20.10.5 name : AZCPEGWx0xWESTUS--10.20.10.5--22 port : 22 type : host terraform : bin : terraform output : 'no' source : ./quickstarts/docs/terraform work_dir : . appwans : - action : create endpoints : - BranchGatewayName - ClientName name : appwan-ssh-22 services : - AZCPEGWx0xWESTUS--10.20.10.5--22 After the script ran again successfully, the connectivity should have been up. To test connectivity, log in to the Remote Client or Branch App Server and run ssh \"username\"@\"privateIp\" To delete resources created, just follow the reverse order. Change the action to delete for AppWans first, then other resources as indicated in the code snippets. appwans : - action : delete endpoints : - BranchGatewayName - ClientName name : null services : - AZCPEGWx0xWESTUS--10.20.10.5--22 Services services : - action : delete gateway : AZCPEGWx0xWESTUS ip : 10.20.10.5 name : null port : 22 type : host Endpoints - will delete all resources in Azure as well. terraform state rm \"{tf resource name for RG}\" // run this before the python script if Resource Group needs to be preserved 1. gateway_list : - action : delete cloud : azure count : 1 names : [] region : westus regionalCidr : - 10.20.10.0/24 regkeys : [] resourceGroup : name : demoPythonTerraform01 region : centralus tag : TerraformDemo Network environment : production network_action : delete network_name : DemoNet01 Done via Jenkins @ In this section, we will use Resource yaml along with Jenkinsfile to show how to automate the steps further by creating the Jenkins Job Jenkins Requirements java docker Then follow jenkins installation using docker to install Jenkins on the localhost and choose \"Install suggested plugins\". After successful installation, one should be able to reach the Jenkins Dashboard (8080 is default port). Note If one wants to add the gateway deployed in the Private DataCenter and/or NF Client, it must be created prior to running the next steps. Otherwise the options of APPWAN_PRIVATE_GATEWAY and APPWAN_PRIVATE_CLIENT can be left blank and added after the appwan is created using the steps described in the Console UI section above. GATEWAY_NAME and SERVICE_NAME are automatically generated by the scripts in this version. GATEWAY_NAME = \"GW TYPE\"+x0x+\"LOCATION OF AZURE GW\", e.g. AZCPEGWx0xWESTUS; SERVICE_NAME = \"GW NAME\"--\"SERVICE IP\"--\"SERVICE PORT\", e.g. AZCPEGWx0xWESTUS--10.20.10.5--22. Setting Up Jenkins Pipeline Login to Jenkins Click on \" New Item\" Name you Project, select pipeline option and click \"Ok\" In the pipeline details, fill in the scm details as seen in the image below and click \"Save\". Everything default apart from: Repository Url: https://github.com/netfoundry/mop.git Script Path: pipeline/netfoundrydeploy2cloud.jenkinsfile Set up users for Azure API and NF MOP API access -- More on Credentials setup Run Jenkinsjob by selecting on the pipeline created in the previous step. Click on \"Build with Parameters\" To create the resources Fill in the Azure Details (e.g. RG, Tenant Id, etc) and select the following: NF Environment, e.g. production NETWORK_ACTION - create NETWORK_NAME, e.g. DEMONET GATEWAY_ACTION - create If Azure RG needs to be preserved, then KEEP_RG option must be left checked. LOCATION, e.g. westus - location where the Azure GW will be deployed in SUBNET_PREFIX, e.g. 10.20.10.0/24 - the subnet used for the vNet in the location of the Azure GW deployment. Run Jenkins job again by selecting on the pipeline created in the previous step. Click on \"Build with Parameters\" Fill in service and appwan details by selecting the following: KEEP_RG - not selected NF Environment, e.g. production SERVICE_ACTION - create APPWAN_ACTION - create GATEWAY_NAME, e.g. AZCPEGWx0xWESTUS (this is created in the previous step automatically) SERVICE_NAME, e.g. AZCPEGWx0xWESTUS--10.20.10.5--22 (this is created automatically during this step) SERVICE_IP, e.g. 10.20.10.5 SERVICE_PORT, e.g. 22 APPWAN_NAME, e.g. appwan-ssh-22 APPWAN_PRIVATE_GATEWAY, e.g. private-gateway-name (this is created outside of the jenkins job, prior to running this step) APPWAN_PRIVATE_CLIENT, e.g. client-name (this is created outside of the jenkins job, prior to running this step) APPWAN_SERVICE, e.g. AZCPEGWx0xWESTUS--10.20.10.5--22 To delete the resources Run Jenkins job again by selecting on the pipeline created in the previous step. Click on \"Build with Parameters\" Fill in the Azure Details (e.g. RG, Tenant Id, etc) and select the following: NF Environment, e.g. production NETWORK_ACTION - delete NETWORK_NAME, e.g. DEMONET GATEWAY_ACTION - delete Pipeline View Done Create IP Host Service @ This section will guide a user through the steps on how to create a NF Service. Console UI Navigate to Manage Services Page under Manage Appwans Click on + sign in the top right corner. Click on \"Create an IP Host Service\" Fill in the required information for SSH and click on \"Create\" If successfully, the service is green. Done Create AppWan @ This section will guide a user through the steps on how to enable service connectivity to users by creating an appwan. Console UI Navigate to Manage AppWANS Page under Manage Appwans Click on + sign in the top right corner. Click on \"Component Builder Appwan\" Move the desired gateway (e.g. DemoGateway01) from \"Available\" Gateways to \"Selected\" Endpoints. Move the desired service (e.g. DemoServiceSsh) from \"Available\" to \"Selected\" Services. Click on \"Create\". Done","title":"Branch Application To Cloud Application Connectivity"},{"location":"azure/connectApp2App/#overview","text":"This quickstart guide will provide all the steps to create a secure service between a branch application and/or user and an application hosted in Azure Cloud using NetFoundry Overlay Fabric (NFOF). Important Assumption is that the NF Fabric is already up.","title":"Overview"},{"location":"azure/connectApp2App/#through_nf_web_console_ui","text":"","title":"Through NF Web Console UI"},{"location":"azure/connectApp2App/#create_and_deploy_nf_gateway_in_branch_datacenter","text":"This section will guide a user through the steps on how to create a NF Manage Gateway in the NF Console UI and install it in the Branch Datacenter. Console UI Navigate to Manage Gateways Page Click on + sign in the top right corner. Click on \"Create Gateway\" on the VCPE Gateway Card Fill in the required information and click on \"Create\" Copy the Client Registration Key Click on \"Download\" button on the Installation Package Card Download the correct image for the desired Hypervisor. Follow the installation procedure linked in the description of each image type (i.e. \"Click Here\"). Once installed, login into it locally with ssh and register it using the key copied in the previous step. Run the following command sudo nfnreg \"reg key\" Once registered, one should see the gateway status turn to green in NF Console UI Done","title":"Create and Deploy NF Gateway in Branch Datacenter"},{"location":"azure/connectApp2App/#create_and_deploy_nf_azure_gateway","text":"This section will guide a user through the steps on how to create a NF Manage Gateway in the NF Console UI and install it in the Azure vNet. Console UI Navigate to Manage Gateways Page Click on + sign in the top right corner. Click on \"Create Gateway\" on the Azure Cloud Gateway Card Fill in the required information and click on \"Create\" Copy the Client Registration Key Click on \"Deploy to Microsoft Azure\". It will take you to the Azure Portal and ask you for your login credentials. You will be presented with the template that needs to be filled. The first section is the Basics regarding your Subscription and Resource Group this gateway will be deployed in. The second section related to resources associated with this gateway. e.g. vm name, ip address space, security groups, etc. you will paste the registration key copied in step 5. You will also need the public ssh key to use for access to this gateway remotely. You will need to agree to Azure Marketplace Terms and Conditions and click to \"Purchase\" to continue. If the NF Gateway was deployed successfully. Here is the view of the Resource Group and NF Conole UI. Done","title":"Create and Deploy NF Azure Gateway"},{"location":"azure/connectApp2App/#create_ip_host_service","text":"This section will guide a user through the steps on how to create a NF Service. Console UI Navigate to Manage Services Page under Manage Appwans Click on + sign in the top right corner. Click on \"Create an IP Host Service\" Fill in the required information for SSH and click on \"Create\" If successfully, the service is green. Done","title":"Create IP Host Service"},{"location":"azure/connectApp2App/#create_appwan","text":"This section will guide a user through the steps on how to enable service connectivity to users by creating an appwan. Console UI Navigate to Manage AppWANS Page under Manage Appwans Click on + sign in the top right corner. Click on \"Component Builder Appwan\" Move the desired gateway (e.g. DemoGateway01) from \"Available\" Gateways to \"Selected\" Endpoints. Move the desired service (e.g. DemoServiceSsh) from \"Available\" to \"Selected\" Services. Click on \"Create\". Done","title":"Create AppWan"},{"location":"azure/connectApp2App/#test_connectivity_to_application_server","text":"Route to vNet The private IP of NF Gateway (e.g. YourBranchGatewayName) needs to be the next hop to reach the vNet in Azure (e.g. 10.0.8.0/24). Thus, a static route will need to be configured in one of the branch routers. NF Gateway can support dynamic routing if needed (e.g.bgp, ospf) Steps Log in to a Client App Host in Branch DataCenter Run ssh username@privateIpOfServerAppHostInAzure","title":"Test Connectivity to Application Server"},{"location":"azure/connectApp2App/#programmatically","text":"","title":"Programmatically"},{"location":"azure/connectApp2App/#via_python_and_terraform","text":"Python Modules For the code clarity, we have broken down the code into multiple Python modules NF REST CRUD (Create,Read, Update and Delete) operations Get MOP Session Token Create NF Network Create NF Gateway(s) Create NF Service(s) Create NF AppWan(s) Wrapper Script to Create NF Resources based on Resource yaml file Environment Setup Requirements ~/.env to store NF Credentials in (e.g. clientId, clientSecret ) to obtain a session token for NF API Export Azure Credentials (e.g, export ARM_TENANT_ID, ARM_CLIENT_ID, ARM_CLIENT_SECRET, ARM_SUBSCRIPTION_ID ) to enable resource gateway creation in Azure Resource Group via Terraform. Terraform and Python3 installed in path. Additional Information: The new Resource Group in Azure is created based on then name provided in Resource yml , if one does not exist already in the same region (e.g. centralus). The action delete gateway will delete the RG as well even if it was an existing RG. If one does not want to delete the RG, the command terraform state rm \"{tf resource name for RG}\" needs to be run before running the gateway delete step. This will ensure that the RG is not deleted. A new vNet will be created and NF Gateway will be placed in it. Environment means the NF Console Environment used (e.g. production), not Azure. Steps Clone this repo (git clone https://github.com/netfoundry/mop.git) Update Resource yaml file with the desired options to feed into the wrapper script as described in the following code snippet. All Resource.yml Options Run this from the root folder to create GW in NF Console UI and Azure. python3 quickstarts / docs / api / python / source / netfoundry / nf_resources . py -- file quickstarts / docs / api / python / etc / nf_resources . yml Required Configuration Parameters for Gateway Creation environment : production network_action : get network_name : DemoNet01 gateway_list : - action : create cloud : azure count : 1 names : [] region : westus regionalCidr : [ 10.20.10.0/24 ] regkeys : [] resourceGroup : name : demoPythonTerraform01 region : centralus tag : TerraformDemo terraform : bin : terraform output : 'no' source : ./quickstarts/docs/terraform work_dir : . After the script is run successfully, one can see that the gateway name and registration key were saved in Resource.yml file. The name is created automatically based on region and gateway type joined with x and gateway count (AZCPEGW means an azure type gateway in NF console). One can create more than one gateway in the same region by increasing the count to more than 1. environment : production gateway_list : - action : create cloud : azure count : 1 names : - AZCPEGWx0xWESTUS region : westus regionalCidr : - 10.20.10.0/24 regkeys : - 21DB86724EC3F31C11C1C9D68CE5ECD6A06F057E resourceGroup : name : demoPythonTerraform01 region : centralus tag : TerraformDemo network_action : get network_name : DemoNet01 terraform : bin : terraform output : 'no' source : ./quickstarts/docs/terraform work_dir : . Create a test server vm on the same vNet if not already present. Update the Resoure.yaml file to include the Service option to create the NF service on the gateway create in the previous step. Don't forget to change the action on the gateway to \"get\". environment : production gateway_list : - action : get cloud : azure count : 1 names : - AZCPEGWx0xWESTUS region : westus regionalCidr : - 10.20.10.0/24 regkeys : - 21DB86724EC3F31C11C1C9D68CE5ECD6A06F057E resourceGroup : name : demoPythonTerraform01 region : centralus tag : TerraformDemo network_action : get network_name : DemoNet01 terraform : bin : terraform output : 'no' source : ./quickstarts/docs/terraform work_dir : . services : - action : create gateway : AZCPEGWx0xWESTUS ip : 10.20.10.5 port : 22 name : type : host After the script run again successfully, the service section should have been populated with the service name as so. services : - action : create gateway : AZCPEGWx0xWESTUS ip : 10.20.10.5 name : AZCPEGWx0xWESTUS--10.20.10.5--22 port : 22 type : host Create a gateway in the branch as the steps in the UI section indicated . We will provide code snippets for private hypervisors deployment through python in later releases (e.g. vSphere) Update the Resoure.yaml file to include the AppWan option to create the NF AppWan tying the gateway, client and service created in the previous steps. Don't forget to change the action on the service option to \"get\". environment : production gateway_list : - action : get cloud : azure count : 1 names : - AZCPEGWx0xWESTUS region : westus regionalCidr : - 10.20.10.0/24 regkeys : - 21DB86724EC3F31C11C1C9D68CE5ECD6A06F057E resourceGroup : name : demoPythonTerraform01 region : centralus tag : TerraformDemo network_action : get network_name : DemoNet01 services : - action : get gateway : AZCPEGWx0xWESTUS ip : 10.20.10.5 name : AZCPEGWx0xWESTUS--10.20.10.5--22 port : 22 type : host terraform : bin : terraform output : 'no' source : ./quickstarts/docs/terraform work_dir : . appwans : - action : create endpoints : - BranchGatewayName - ClientName name : appwan-ssh-22 services : - AZCPEGWx0xWESTUS--10.20.10.5--22 After the script ran again successfully, the connectivity should have been up. To test connectivity, log in to the Remote Client or Branch App Server and run ssh \"username\"@\"privateIp\" To delete resources created, just follow the reverse order. Change the action to delete for AppWans first, then other resources as indicated in the code snippets. appwans : - action : delete endpoints : - BranchGatewayName - ClientName name : null services : - AZCPEGWx0xWESTUS--10.20.10.5--22 Services services : - action : delete gateway : AZCPEGWx0xWESTUS ip : 10.20.10.5 name : null port : 22 type : host Endpoints - will delete all resources in Azure as well. terraform state rm \"{tf resource name for RG}\" // run this before the python script if Resource Group needs to be preserved 1. gateway_list : - action : delete cloud : azure count : 1 names : [] region : westus regionalCidr : - 10.20.10.0/24 regkeys : [] resourceGroup : name : demoPythonTerraform01 region : centralus tag : TerraformDemo Network environment : production network_action : delete network_name : DemoNet01 Done","title":"via Python and Terraform"},{"location":"azure/connectApp2App/#via_jenkins","text":"In this section, we will use Resource yaml along with Jenkinsfile to show how to automate the steps further by creating the Jenkins Job Jenkins Requirements java docker Then follow jenkins installation using docker to install Jenkins on the localhost and choose \"Install suggested plugins\". After successful installation, one should be able to reach the Jenkins Dashboard (8080 is default port). Note If one wants to add the gateway deployed in the Private DataCenter and/or NF Client, it must be created prior to running the next steps. Otherwise the options of APPWAN_PRIVATE_GATEWAY and APPWAN_PRIVATE_CLIENT can be left blank and added after the appwan is created using the steps described in the Console UI section above. GATEWAY_NAME and SERVICE_NAME are automatically generated by the scripts in this version. GATEWAY_NAME = \"GW TYPE\"+x0x+\"LOCATION OF AZURE GW\", e.g. AZCPEGWx0xWESTUS; SERVICE_NAME = \"GW NAME\"--\"SERVICE IP\"--\"SERVICE PORT\", e.g. AZCPEGWx0xWESTUS--10.20.10.5--22. Setting Up Jenkins Pipeline Login to Jenkins Click on \" New Item\" Name you Project, select pipeline option and click \"Ok\" In the pipeline details, fill in the scm details as seen in the image below and click \"Save\". Everything default apart from: Repository Url: https://github.com/netfoundry/mop.git Script Path: pipeline/netfoundrydeploy2cloud.jenkinsfile Set up users for Azure API and NF MOP API access -- More on Credentials setup Run Jenkinsjob by selecting on the pipeline created in the previous step. Click on \"Build with Parameters\" To create the resources Fill in the Azure Details (e.g. RG, Tenant Id, etc) and select the following: NF Environment, e.g. production NETWORK_ACTION - create NETWORK_NAME, e.g. DEMONET GATEWAY_ACTION - create If Azure RG needs to be preserved, then KEEP_RG option must be left checked. LOCATION, e.g. westus - location where the Azure GW will be deployed in SUBNET_PREFIX, e.g. 10.20.10.0/24 - the subnet used for the vNet in the location of the Azure GW deployment. Run Jenkins job again by selecting on the pipeline created in the previous step. Click on \"Build with Parameters\" Fill in service and appwan details by selecting the following: KEEP_RG - not selected NF Environment, e.g. production SERVICE_ACTION - create APPWAN_ACTION - create GATEWAY_NAME, e.g. AZCPEGWx0xWESTUS (this is created in the previous step automatically) SERVICE_NAME, e.g. AZCPEGWx0xWESTUS--10.20.10.5--22 (this is created automatically during this step) SERVICE_IP, e.g. 10.20.10.5 SERVICE_PORT, e.g. 22 APPWAN_NAME, e.g. appwan-ssh-22 APPWAN_PRIVATE_GATEWAY, e.g. private-gateway-name (this is created outside of the jenkins job, prior to running this step) APPWAN_PRIVATE_CLIENT, e.g. client-name (this is created outside of the jenkins job, prior to running this step) APPWAN_SERVICE, e.g. AZCPEGWx0xWESTUS--10.20.10.5--22 To delete the resources Run Jenkins job again by selecting on the pipeline created in the previous step. Click on \"Build with Parameters\" Fill in the Azure Details (e.g. RG, Tenant Id, etc) and select the following: NF Environment, e.g. production NETWORK_ACTION - delete NETWORK_NAME, e.g. DEMONET GATEWAY_ACTION - delete Pipeline View Done","title":"via Jenkins"},{"location":"azure/connectApp2App/#create_ip_host_service_1","text":"This section will guide a user through the steps on how to create a NF Service. Console UI Navigate to Manage Services Page under Manage Appwans Click on + sign in the top right corner. Click on \"Create an IP Host Service\" Fill in the required information for SSH and click on \"Create\" If successfully, the service is green. Done","title":"Create IP Host Service"},{"location":"azure/connectApp2App/#create_appwan_1","text":"This section will guide a user through the steps on how to enable service connectivity to users by creating an appwan. Console UI Navigate to Manage AppWANS Page under Manage Appwans Click on + sign in the top right corner. Click on \"Component Builder Appwan\" Move the desired gateway (e.g. DemoGateway01) from \"Available\" Gateways to \"Selected\" Endpoints. Move the desired service (e.g. DemoServiceSsh) from \"Available\" to \"Selected\" Services. Click on \"Create\". Done","title":"Create AppWan"},{"location":"azure/connectUser2App/","text":"Overview @ This quickstart guide will provide all the steps to create a secure service between a remote user and an application hosted in Azure Cloud using NetFoundry Overlay Fabric (NFOF). Important Assumption is that the NF Fabric is already up and the NF Client is installed. Through NF Web Console UI @ Create and install NF Client @ This section will guide a user through the steps on how to create a client in the NF Console UI. Then, it will provide links to Guides on how to install the NetFoundry Client Software for Windows and MAC Clients, including the registration with the NF Network Fabric. Console UI Navigate to Manage Clients Page Click on + sign in the top right corner. Fill in the required information and click on \"Create\" Copy the Client Registration Key Install the NF Client Software by following the directions at the appropriate OS link Window Mac Create and Deploy NF Azure Gateway @ This section will guide a user through the steps on how to create a NF Manage Gateway in the NF Console UI and install it in the Azure vNet. Console UI Navigate to Manage Gateways Page Click on + sign in the top right corner. Click on \"Create Gateway\" on the Azure Cloud Gateway Card Fill in the required information and click on \"Create\" Copy the Client Registration Key Click on \"Deploy to Microsoft Azure\". It will take you to the Azure Portal and ask you for your login credentials. You will be presented with the template that needs to be filled. The first section is the Basics regarding your Subscription and Resource Group this gateway will be deployed in. The second section related to resources associated with this gateway. e.g. vm name, ip address space, security groups, etc. you will paste the registration key copied in step 5. You will also need the public ssh key to use for access to this gateway remotely. You will need to agree to Azure Marketplace Terms and Conditions and click to \"Purchase\" to continue. If the NF Gateway was deployed successfully. Here is the view of the Resource Group and NF Conole UI. Done Create IP Host Service @ This section will guide a user through the steps on how to create a NF Service. Console UI Navigate to Manage Services Page under Manage Appwans Click on + sign in the top right corner. Click on \"Create an IP Host Service\" Fill in the required information for SSH and click on \"Create\" If successfully, the service is green. Done Create AppWan @ This section will guide a user through the steps on how to enable service connectivity to users by creating an appwan. Console UI Navigate to Manage AppWANS Page under Manage Appwans Click on + sign in the top right corner. Click on \"Component Builder Appwan\" Move the desired client (e.g. DemoClient01) from \"Available\" Clients to \"Selected\" Endpoints. Move the desired service (e.g. DemoServiceSsh) from \"Available\" to \"Selected\" Services. Click on \"Create\". Done Test Connectivity to Application Server @ To test connectivity, log in to the DemoClinet01 and run ssh username@privateIp Programmatically @ via Python and Terraform @ Python Modules For the code clarity, we have broken down the code into multiple Python modules NF REST CRUD (Create,Read, Update and Delete) operations Get MOP Session Token Create NF Network Create NF Gateway(s) Create NF Service(s) Create NF AppWan(s) Wrapper Script to Create NF Resources based on Resource yaml file Environment Setup Requirements ~/.env to store NF Credentials in (e.g. clientId, clientSecret ) to obtain a session token for NF API Export Azure Credentials (e.g, export ARM_TENANT_ID, ARM_CLIENT_ID, ARM_CLIENT_SECRET, ARM_SUBSCRIPTION_ID ) to enable resource gateway creation in Azure Resource Group via Terraform. Terraform and Python3 installed in path. Additional Information: The new Resource Group in Azure is created based on then name provided in Resource yml , if one does not exist already in the same region (e.g. centralus). The action delete gateway will delete the RG as well even if it was an existing RG. If one does not want to delete the RG, the command terraform state rm \"{tf resource name for RG}\" needs to be run before running the gateway delete step. This will ensure that the RG is not deleted. A new vNet will be created and NF Gateway will be placed in it. Environment means the NF Console Environment used (e.g. production), not Azure. Steps Clone this repo (git clone https://github.com/netfoundry/mop.git) Update Resource yaml file with the desired options to feed into the wrapper script as described in the following code snippet. All Resource.yml Options Run this from the root folder to create GW in NF Console UI and Azure. python3 quickstarts / docs / api / python / source / netfoundry / nf_resources . py -- file quickstarts / docs / api / python / etc / nf_resources . yml Required Configuration Parameters for Gateway Creation environment : production network_action : get network_name : DemoNet01 gateway_list : - action : create cloud : azure count : 1 names : [] region : westus regionalCidr : [ 10.20.10.0/24 ] regkeys : [] resourceGroup : name : demoPythonTerraform01 region : centralus tag : TerraformDemo terraform : bin : terraform output : 'no' source : ./quickstarts/docs/terraform work_dir : . After the script is run successfully, one can see that the gateway name and registration key were saved in Resource.yml file. The name is created automatically based on region and gateway type joined with x and gateway count (AZCPEGW means an azure type gateway in NF console). One can create more than one gateway in the same region by increasing the count to more than 1. environment : production gateway_list : - action : create cloud : azure count : 1 names : - AZCPEGWx0xWESTUS region : westus regionalCidr : - 10.20.10.0/24 regkeys : - 21DB86724EC3F31C11C1C9D68CE5ECD6A06F057E resourceGroup : name : demoPythonTerraform01 region : centralus tag : TerraformDemo network_action : get network_name : DemoNet01 terraform : bin : terraform output : 'no' source : ./quickstarts/docs/terraform work_dir : . Create a test server vm on the same vNet if not already present. Update the Resoure.yaml file to include the Service option to create the NF service on the gateway create in the previous step. Don't forget to change the action on the gateway to \"get\". environment : production gateway_list : - action : get cloud : azure count : 1 names : - AZCPEGWx0xWESTUS region : westus regionalCidr : - 10.20.10.0/24 regkeys : - 21DB86724EC3F31C11C1C9D68CE5ECD6A06F057E resourceGroup : name : demoPythonTerraform01 region : centralus tag : TerraformDemo network_action : get network_name : DemoNet01 terraform : bin : terraform output : 'no' source : ./quickstarts/docs/terraform work_dir : . services : - action : create gateway : AZCPEGWx0xWESTUS ip : 10.20.10.5 port : 22 name : type : host After the script run again successfully, the service section should have been populated with the service name as so. services : - action : create gateway : AZCPEGWx0xWESTUS ip : 10.20.10.5 name : AZCPEGWx0xWESTUS--10.20.10.5--22 port : 22 type : host Create a client endpoint if not already done so. Update the Resoure.yaml file to include the AppWan option to create the NF AppWan tying the gateway, client and service created in the previous steps. Don't forget to change the action on the service option to \"get\". environment : production gateway_list : - action : get cloud : azure count : 1 names : - AZCPEGWx0xWESTUS region : westus regionalCidr : - 10.20.10.0/24 regkeys : - 21DB86724EC3F31C11C1C9D68CE5ECD6A06F057E resourceGroup : name : demoPythonTerraform01 region : centralus tag : TerraformDemo network_action : get network_name : DemoNet01 services : - action : get gateway : AZCPEGWx0xWESTUS ip : 10.20.10.5 name : AZCPEGWx0xWESTUS--10.20.10.5--22 port : 22 type : host terraform : bin : terraform output : 'no' source : ./quickstarts/docs/terraform work_dir : . appwans : - action : create endpoints : - BranchGatewayName - ClientName name : appwan-ssh-22 services : - AZCPEGWx0xWESTUS--10.20.10.5--22 After the script ran again successfully, the connectivity should have been up. To test connectivity, log in to the DemoClinet01 and run ssh \"username\"@\"privateIp\" To delete resources created, just follow the reverse order. Change the action to delete for AppWans first, then other resources as indicated in the code snippets. appwans : - action : delete endpoints : - BranchGatewayName - ClientName name : null services : - AZCPEGWx0xWESTUS--10.20.10.5--22 Services services : - action : delete gateway : AZCPEGWx0xWESTUS ip : 10.20.10.5 name : null port : 22 type : host Endpoints - will delete all resources in Azure as well. terraform state rm \"{tf resource name for RG}\" // run this before the python script if Resource Group needs to be preserved 1. gateway_list : - action : delete cloud : azure count : 1 names : [] region : westus regionalCidr : - 10.20.10.0/24 regkeys : [] resourceGroup : name : demoPythonTerraform01 region : centralus tag : TerraformDemo Network environment : production network_action : delete network_name : DemoNet01 Done via Jenkins @ In this section, we will use Resource yaml along with Jenkinsfile to show how to automate the steps further by creating the Jenkins Job Jenkins Requirements java docker Then follow jenkins installation using docker to install Jenkins on the localhost and choose \"Install suggested plugins\". After successful installation, one should be able to reach the Jenkins Dashboard (8080 is default port). Note If one wants to add the gateway deployed in the Private DataCenter and/or NF Client, it must be created prior to running the next steps. Otherwise the options of APPWAN_PRIVATE_GATEWAY and APPWAN_PRIVATE_CLIENT can be left blank and added after the appwan is created using the steps described in the Console UI section above. GATEWAY_NAME and SERVICE_NAME are automatically generated by the scripts in this version. GATEWAY_NAME = \"GW TYPE\"+x0x+\"LOCATION OF AZURE GW\", e.g. AZCPEGWx0xWESTUS; SERVICE_NAME = \"GW NAME\"--\"SERVICE IP\"--\"SERVICE PORT\", e.g. AZCPEGWx0xWESTUS--10.20.10.5--22. Setting Up Jenkins Pipeline Login to Jenkins Click on \" New Item\" Name you Project, select pipeline option and click \"Ok\" In the pipeline details, fill in the scm details as seen in the image below and click \"Save\". Everything default apart from: Repository Url: https://github.com/netfoundry/mop.git Script Path: pipeline/netfoundrydeploy2cloud.jenkinsfile Set up users for Azure API and NF MOP API access -- More on Credentials setup Run Jenkinsjob by selecting on the pipeline created in the previous step. Click on \"Build with Parameters\" To create the resources Fill in the Azure Details (e.g. RG, Tenant Id, etc) and select the following: NF Environment, e.g. production NETWORK_ACTION - create NETWORK_NAME, e.g. DEMONET GATEWAY_ACTION - create If Azure RG needs to be preserved, then KEEP_RG option must be left checked. LOCATION, e.g. westus - location where the Azure GW will be deployed in SUBNET_PREFIX, e.g. 10.20.10.0/24 - the subnet used for the vNet in the location of the Azure GW deployment. Run Jenkins job again by selecting on the pipeline created in the previous step. Click on \"Build with Parameters\" Fill in service and appwan details by selecting the following: KEEP_RG - not selected NF Environment, e.g. production SERVICE_ACTION - create APPWAN_ACTION - create GATEWAY_NAME, e.g. AZCPEGWx0xWESTUS (this is created in the previous step automatically) SERVICE_NAME, e.g. AZCPEGWx0xWESTUS--10.20.10.5--22 (this is created automatically during this step) SERVICE_IP, e.g. 10.20.10.5 SERVICE_PORT, e.g. 22 APPWAN_NAME, e.g. appwan-ssh-22 APPWAN_PRIVATE_GATEWAY, e.g. private-gateway-name (this is created outside of the jenkins job, prior to running this step) APPWAN_PRIVATE_CLIENT, e.g. client-name (this is created outside of the jenkins job, prior to running this step) APPWAN_SERVICE, e.g. AZCPEGWx0xWESTUS--10.20.10.5--22 To delete the resources Run Jenkins job again by selecting on the pipeline created in the previous step. Click on \"Build with Parameters\" Fill in the Azure Details (e.g. RG, Tenant Id, etc) and select the following: NF Environment, e.g. production NETWORK_ACTION - delete NETWORK_NAME, e.g. DEMONET GATEWAY_ACTION - delete Pipeline View Done","title":"Mobile User To Cloud Application Connectivity"},{"location":"azure/connectUser2App/#overview","text":"This quickstart guide will provide all the steps to create a secure service between a remote user and an application hosted in Azure Cloud using NetFoundry Overlay Fabric (NFOF). Important Assumption is that the NF Fabric is already up and the NF Client is installed.","title":"Overview"},{"location":"azure/connectUser2App/#through_nf_web_console_ui","text":"","title":"Through NF Web Console UI"},{"location":"azure/connectUser2App/#create_and_install_nf_client","text":"This section will guide a user through the steps on how to create a client in the NF Console UI. Then, it will provide links to Guides on how to install the NetFoundry Client Software for Windows and MAC Clients, including the registration with the NF Network Fabric. Console UI Navigate to Manage Clients Page Click on + sign in the top right corner. Fill in the required information and click on \"Create\" Copy the Client Registration Key Install the NF Client Software by following the directions at the appropriate OS link Window Mac","title":"Create and install NF Client"},{"location":"azure/connectUser2App/#create_and_deploy_nf_azure_gateway","text":"This section will guide a user through the steps on how to create a NF Manage Gateway in the NF Console UI and install it in the Azure vNet. Console UI Navigate to Manage Gateways Page Click on + sign in the top right corner. Click on \"Create Gateway\" on the Azure Cloud Gateway Card Fill in the required information and click on \"Create\" Copy the Client Registration Key Click on \"Deploy to Microsoft Azure\". It will take you to the Azure Portal and ask you for your login credentials. You will be presented with the template that needs to be filled. The first section is the Basics regarding your Subscription and Resource Group this gateway will be deployed in. The second section related to resources associated with this gateway. e.g. vm name, ip address space, security groups, etc. you will paste the registration key copied in step 5. You will also need the public ssh key to use for access to this gateway remotely. You will need to agree to Azure Marketplace Terms and Conditions and click to \"Purchase\" to continue. If the NF Gateway was deployed successfully. Here is the view of the Resource Group and NF Conole UI. Done","title":"Create and Deploy NF Azure Gateway"},{"location":"azure/connectUser2App/#create_ip_host_service","text":"This section will guide a user through the steps on how to create a NF Service. Console UI Navigate to Manage Services Page under Manage Appwans Click on + sign in the top right corner. Click on \"Create an IP Host Service\" Fill in the required information for SSH and click on \"Create\" If successfully, the service is green. Done","title":"Create IP Host Service"},{"location":"azure/connectUser2App/#create_appwan","text":"This section will guide a user through the steps on how to enable service connectivity to users by creating an appwan. Console UI Navigate to Manage AppWANS Page under Manage Appwans Click on + sign in the top right corner. Click on \"Component Builder Appwan\" Move the desired client (e.g. DemoClient01) from \"Available\" Clients to \"Selected\" Endpoints. Move the desired service (e.g. DemoServiceSsh) from \"Available\" to \"Selected\" Services. Click on \"Create\". Done","title":"Create AppWan"},{"location":"azure/connectUser2App/#test_connectivity_to_application_server","text":"To test connectivity, log in to the DemoClinet01 and run ssh username@privateIp","title":"Test Connectivity to Application Server"},{"location":"azure/connectUser2App/#programmatically","text":"","title":"Programmatically"},{"location":"azure/connectUser2App/#via_python_and_terraform","text":"Python Modules For the code clarity, we have broken down the code into multiple Python modules NF REST CRUD (Create,Read, Update and Delete) operations Get MOP Session Token Create NF Network Create NF Gateway(s) Create NF Service(s) Create NF AppWan(s) Wrapper Script to Create NF Resources based on Resource yaml file Environment Setup Requirements ~/.env to store NF Credentials in (e.g. clientId, clientSecret ) to obtain a session token for NF API Export Azure Credentials (e.g, export ARM_TENANT_ID, ARM_CLIENT_ID, ARM_CLIENT_SECRET, ARM_SUBSCRIPTION_ID ) to enable resource gateway creation in Azure Resource Group via Terraform. Terraform and Python3 installed in path. Additional Information: The new Resource Group in Azure is created based on then name provided in Resource yml , if one does not exist already in the same region (e.g. centralus). The action delete gateway will delete the RG as well even if it was an existing RG. If one does not want to delete the RG, the command terraform state rm \"{tf resource name for RG}\" needs to be run before running the gateway delete step. This will ensure that the RG is not deleted. A new vNet will be created and NF Gateway will be placed in it. Environment means the NF Console Environment used (e.g. production), not Azure. Steps Clone this repo (git clone https://github.com/netfoundry/mop.git) Update Resource yaml file with the desired options to feed into the wrapper script as described in the following code snippet. All Resource.yml Options Run this from the root folder to create GW in NF Console UI and Azure. python3 quickstarts / docs / api / python / source / netfoundry / nf_resources . py -- file quickstarts / docs / api / python / etc / nf_resources . yml Required Configuration Parameters for Gateway Creation environment : production network_action : get network_name : DemoNet01 gateway_list : - action : create cloud : azure count : 1 names : [] region : westus regionalCidr : [ 10.20.10.0/24 ] regkeys : [] resourceGroup : name : demoPythonTerraform01 region : centralus tag : TerraformDemo terraform : bin : terraform output : 'no' source : ./quickstarts/docs/terraform work_dir : . After the script is run successfully, one can see that the gateway name and registration key were saved in Resource.yml file. The name is created automatically based on region and gateway type joined with x and gateway count (AZCPEGW means an azure type gateway in NF console). One can create more than one gateway in the same region by increasing the count to more than 1. environment : production gateway_list : - action : create cloud : azure count : 1 names : - AZCPEGWx0xWESTUS region : westus regionalCidr : - 10.20.10.0/24 regkeys : - 21DB86724EC3F31C11C1C9D68CE5ECD6A06F057E resourceGroup : name : demoPythonTerraform01 region : centralus tag : TerraformDemo network_action : get network_name : DemoNet01 terraform : bin : terraform output : 'no' source : ./quickstarts/docs/terraform work_dir : . Create a test server vm on the same vNet if not already present. Update the Resoure.yaml file to include the Service option to create the NF service on the gateway create in the previous step. Don't forget to change the action on the gateway to \"get\". environment : production gateway_list : - action : get cloud : azure count : 1 names : - AZCPEGWx0xWESTUS region : westus regionalCidr : - 10.20.10.0/24 regkeys : - 21DB86724EC3F31C11C1C9D68CE5ECD6A06F057E resourceGroup : name : demoPythonTerraform01 region : centralus tag : TerraformDemo network_action : get network_name : DemoNet01 terraform : bin : terraform output : 'no' source : ./quickstarts/docs/terraform work_dir : . services : - action : create gateway : AZCPEGWx0xWESTUS ip : 10.20.10.5 port : 22 name : type : host After the script run again successfully, the service section should have been populated with the service name as so. services : - action : create gateway : AZCPEGWx0xWESTUS ip : 10.20.10.5 name : AZCPEGWx0xWESTUS--10.20.10.5--22 port : 22 type : host Create a client endpoint if not already done so. Update the Resoure.yaml file to include the AppWan option to create the NF AppWan tying the gateway, client and service created in the previous steps. Don't forget to change the action on the service option to \"get\". environment : production gateway_list : - action : get cloud : azure count : 1 names : - AZCPEGWx0xWESTUS region : westus regionalCidr : - 10.20.10.0/24 regkeys : - 21DB86724EC3F31C11C1C9D68CE5ECD6A06F057E resourceGroup : name : demoPythonTerraform01 region : centralus tag : TerraformDemo network_action : get network_name : DemoNet01 services : - action : get gateway : AZCPEGWx0xWESTUS ip : 10.20.10.5 name : AZCPEGWx0xWESTUS--10.20.10.5--22 port : 22 type : host terraform : bin : terraform output : 'no' source : ./quickstarts/docs/terraform work_dir : . appwans : - action : create endpoints : - BranchGatewayName - ClientName name : appwan-ssh-22 services : - AZCPEGWx0xWESTUS--10.20.10.5--22 After the script ran again successfully, the connectivity should have been up. To test connectivity, log in to the DemoClinet01 and run ssh \"username\"@\"privateIp\" To delete resources created, just follow the reverse order. Change the action to delete for AppWans first, then other resources as indicated in the code snippets. appwans : - action : delete endpoints : - BranchGatewayName - ClientName name : null services : - AZCPEGWx0xWESTUS--10.20.10.5--22 Services services : - action : delete gateway : AZCPEGWx0xWESTUS ip : 10.20.10.5 name : null port : 22 type : host Endpoints - will delete all resources in Azure as well. terraform state rm \"{tf resource name for RG}\" // run this before the python script if Resource Group needs to be preserved 1. gateway_list : - action : delete cloud : azure count : 1 names : [] region : westus regionalCidr : - 10.20.10.0/24 regkeys : [] resourceGroup : name : demoPythonTerraform01 region : centralus tag : TerraformDemo Network environment : production network_action : delete network_name : DemoNet01 Done","title":"via Python and Terraform"},{"location":"azure/connectUser2App/#via_jenkins","text":"In this section, we will use Resource yaml along with Jenkinsfile to show how to automate the steps further by creating the Jenkins Job Jenkins Requirements java docker Then follow jenkins installation using docker to install Jenkins on the localhost and choose \"Install suggested plugins\". After successful installation, one should be able to reach the Jenkins Dashboard (8080 is default port). Note If one wants to add the gateway deployed in the Private DataCenter and/or NF Client, it must be created prior to running the next steps. Otherwise the options of APPWAN_PRIVATE_GATEWAY and APPWAN_PRIVATE_CLIENT can be left blank and added after the appwan is created using the steps described in the Console UI section above. GATEWAY_NAME and SERVICE_NAME are automatically generated by the scripts in this version. GATEWAY_NAME = \"GW TYPE\"+x0x+\"LOCATION OF AZURE GW\", e.g. AZCPEGWx0xWESTUS; SERVICE_NAME = \"GW NAME\"--\"SERVICE IP\"--\"SERVICE PORT\", e.g. AZCPEGWx0xWESTUS--10.20.10.5--22. Setting Up Jenkins Pipeline Login to Jenkins Click on \" New Item\" Name you Project, select pipeline option and click \"Ok\" In the pipeline details, fill in the scm details as seen in the image below and click \"Save\". Everything default apart from: Repository Url: https://github.com/netfoundry/mop.git Script Path: pipeline/netfoundrydeploy2cloud.jenkinsfile Set up users for Azure API and NF MOP API access -- More on Credentials setup Run Jenkinsjob by selecting on the pipeline created in the previous step. Click on \"Build with Parameters\" To create the resources Fill in the Azure Details (e.g. RG, Tenant Id, etc) and select the following: NF Environment, e.g. production NETWORK_ACTION - create NETWORK_NAME, e.g. DEMONET GATEWAY_ACTION - create If Azure RG needs to be preserved, then KEEP_RG option must be left checked. LOCATION, e.g. westus - location where the Azure GW will be deployed in SUBNET_PREFIX, e.g. 10.20.10.0/24 - the subnet used for the vNet in the location of the Azure GW deployment. Run Jenkins job again by selecting on the pipeline created in the previous step. Click on \"Build with Parameters\" Fill in service and appwan details by selecting the following: KEEP_RG - not selected NF Environment, e.g. production SERVICE_ACTION - create APPWAN_ACTION - create GATEWAY_NAME, e.g. AZCPEGWx0xWESTUS (this is created in the previous step automatically) SERVICE_NAME, e.g. AZCPEGWx0xWESTUS--10.20.10.5--22 (this is created automatically during this step) SERVICE_IP, e.g. 10.20.10.5 SERVICE_PORT, e.g. 22 APPWAN_NAME, e.g. appwan-ssh-22 APPWAN_PRIVATE_GATEWAY, e.g. private-gateway-name (this is created outside of the jenkins job, prior to running this step) APPWAN_PRIVATE_CLIENT, e.g. client-name (this is created outside of the jenkins job, prior to running this step) APPWAN_SERVICE, e.g. AZCPEGWx0xWESTUS--10.20.10.5--22 To delete the resources Run Jenkins job again by selecting on the pipeline created in the previous step. Click on \"Build with Parameters\" Fill in the Azure Details (e.g. RG, Tenant Id, etc) and select the following: NF Environment, e.g. production NETWORK_ACTION - delete NETWORK_NAME, e.g. DEMONET GATEWAY_ACTION - delete Pipeline View Done","title":"via Jenkins"},{"location":"azure/intro/","text":"Overview @ Users or Applications can reach applications located in Azure's Private vNets over Internet using secure tunnels from anywhere users have connections to the Internet or Applications located in Private Branch Datacenters as depicted in the diagram. Note The tunnels are encrypted and user-app or app-app sessions are hashed across 3 diverse paths by default. Use Case Diagram @","title":"Use Cases Overview"},{"location":"azure/intro/#overview","text":"Users or Applications can reach applications located in Azure's Private vNets over Internet using secure tunnels from anywhere users have connections to the Internet or Applications located in Private Branch Datacenters as depicted in the diagram. Note The tunnels are encrypted and user-app or app-app sessions are hashed across 3 diverse paths by default.","title":"Overview"},{"location":"azure/intro/#use_case_diagram","text":"","title":"Use Case Diagram"},{"location":"azure/o365-optimization/","text":"Overview @ We will guide users how to deploy a NF Gateway to optimize the connectivity to Microsoft O365 Services. The services that will be optimized are share-point and one-drive Microsoft deployed content delivery network (CDN), where they offer many entry points around the World to access Office 365 Services like sharepoint, onedrive, etc. By providing these \"front doors\" (also known as) to O365 services, MS wanted to improve user experience by optimizing reach-ability and access. With that in mind, Microsoft is pushing Enterprises to utilize this CDN by creating O365 bypass at the edge of the Enterprise Network. The bypass is a configuration change, where a policy routing is enforced to allow the 0365 services to be short circuited to the Internet. The idea is to avoid going through a central location, where all content is inspected and checked for security threats before released to World Wide Web. NetFoundry Edge has the ability to provide such bypass if desired, but in this Quickstart we are showing how our customers can configure NF Network to complement the MS CDN, utilize their optimization and still keep using NF Secure tunnels for connectivity. Find the Closest Front Door @ Microsoft created an online tool to test from user's location, where the best entry to their Network is. Please open a browser on your windows computer and type the following url https://connectivity.office.com/. As it is stated there, click on the location icon. Once the test is finished, it will show where the closest location is. In our example, the user's closest location is Ashburn, VA (Azure USEAST). Select Region Make sure you replace \"Your Region\" with the location of Azure DC given by the location tool. Most of the time, our Orchestration Platform will optimize the network to provide direct connectivity from where you are and Azure GW you are about to create. We will test if that is the case. We continuously update our optimization algorithm to pick the best path all the time based on ongoing data collection and feedback from the network fabric. Through NF Web Console UI @ Create and Deploy NF Azure Gateway @ This section will guide a user through the steps on how to create a NF Manage Gateway in the NF Console UI and install it in the Azure vNet. Console UI Navigate to Manage Gateways Page Click on + sign in the top right corner. Click on \"Create Gateway\" on the Azure Cloud Gateway Card Fill in the required information and click on \"Create\" Copy the Client Registration Key Click on \"Deploy to Microsoft Azure\". It will take you to the Azure Portal and ask you for your login credentials. You will be presented with the template that needs to be filled. The first section is the Basics regarding your Subscription and Resource Group this gateway will be deployed in. The second section related to resources associated with this gateway. e.g. vm name, ip address space, security groups, etc. you will paste the registration key copied in step 5. You will also need the public ssh key to use for access to this gateway remotely. You will need to agree to Azure Marketplace Terms and Conditions and click to \"Purchase\" to continue. If the NF Gateway was deployed successfully. Here is the view of the Resource Group and NF Conole UI. Done Create SharePoint & OneDrive Services Once can find the ip address that are allocated by Microsoft for SharePoint and OneDrive service. Click on this link and write them down We only required to use \"Optimize Required\" (ID 31), and they are 13.107.136.0/22, 40.108.128.0/17, 52.104.0.0/14, 104.146.128.0/17, 150.171.40.0/22. Create 5 services by repeating the next section for each of them. Replace Network Address in Step 4 with the ones above and Intercept Ports with 80, 443. Create IP Network Service @ This section will guide a user through the steps on how to create a NF Service. Console UI Navigate to Manage Services Page under Manage Appwans Click on + sign in the top right corner. Click on \"Create an IP Network Service\" Fill in the required information for the Network your wanting to access. Important Please make sure the service you want to access is behind the gateway you specify here. If successfully, the service is green. Done All services configured. Create AppWan @ This section will guide a user through the steps on how to enable service connectivity to users by creating an appwan. Console UI Navigate to Manage AppWANS Page under Manage Appwans Click on + sign in the top right corner. Click on \"Component Builder Appwan\" Move the desired gateway (e.g. DemoGateway01) from \"Available\" Gateways to \"Selected\" Endpoints. Move the desired service (e.g. DemoServiceSsh) from \"Available\" to \"Selected\" Services. Click on \"Create\". Done AppWan successfully configured would look like this. Create and install NF Client @ This section will guide a user through the steps on how to create a client in the NF Console UI. Then, it will provide links to Guides on how to install the NetFoundry Client Software for Windows and MAC Clients, including the registration with the NF Network Fabric. Console UI Navigate to Manage Clients Page Click on + sign in the top right corner. Fill in the required information and click on \"Create\" Copy the Client Registration Key Install the NF Client Software by following the directions at the appropriate OS link Window Mac Add this Endpoint to the AppWan Once endpoint is added to the AppWan, here is what the services tab should look like. Programmatically @ Create via Python and Terraform @ Python Modules For the code clarity, we have broken down the code into multiple Python modules NF REST CRUD (Create,Read, Update and Delete) operations Get MOP Session Token Create NF Network Create NF Gateway(s) Create NF Service(s) Create NF AppWan(s) Wrapper Script to Create NF Resources based on Resource yaml file Environment Setup Requirements ~/.env to store NF Credentials in (e.g. clientId, clientSecret ) to obtain a session token for NF API Export Azure Credentials (e.g, export ARM_TENANT_ID, ARM_CLIENT_ID, ARM_CLIENT_SECRET, ARM_SUBSCRIPTION_ID ) to enable resource gateway creation in Azure Resource Group via Terraform. Terraform and Python3 installed in path. Additional Information: The new Resource Group in Azure is created based on then name provided in Resource yml , if one does not exist already in the same region (e.g. centralus). The action delete gateway will delete the RG as well even if it was an existing RG. If one does not want to delete the RG, the command terraform state rm \"{tf resource name for RG}\" needs to be run before running the gateway delete step. This will ensure that the RG is not deleted. A new vNet will be created and NF Gateway will be placed in it. Environment means the NF Console Environment used (e.g. production), not Azure. Steps Clone this repo (git clone https://github.com/netfoundry/mop.git) Change directory to mop: cd mop Update quickstarts/docs/api/python/etc/nf_resources.yml as so: environment : production network_action : create network_name : NetworkO365 gateway_list : - action : create cloud : azure count : 1 names : - GATEWAY-O365-01 region : \"region found by the connectivity test, e.g. eastus\" regionalCidr : - 10.20.10.0/24 regkeys : [] resourceGroup : name : \"you resource RG Name\" region : \"region of your RG\" tag : null services : - action : create gateway : GATEWAY-O365-01 name : SharePointOneDrive01 netCidr : 22 netIp : 13.107.136.0 type : network - action : create gateway : GATEWAY-O365-01 name : SharePointOneDrive02 netCidr : 17 netIp : 40.108.128.0 type : network - action : create gateway : GATEWAY-O365-01 name : SharePointOneDrive03 netCidr : 14 netIp : 52.104.0.0 type : network - action : create gateway : GATEWAY-O365-01 name : SharePointOneDrive04 netCidr : 17 netIp : 104.146.128.0 type : network - action : create gateway : GATEWAY-O365-01 name : SharePointOneDrive05 netCidr : 22 netIp : 150.171.40.0 type : network appwans : - action : create endpoints : [] name : AppWanSharepoint services : - SharePointOneDrive01 - SharePointOneDrive02 - SharePointOneDrive03 - SharePointOneDrive04 - SharePointOneDrive05 terraform : bin : terraform output : 'no' source : ./quickstarts/docs/terraform work_dir : . Run this from the root folder (mop) to create network, gateway, services, and appwan throuhg NF API and deploy Virtual Machine to host NF Gateway in your Azure RG. python3 quickstarts / docs / api / python / source / netfoundry / nf_resources . py -- file quickstarts / docs / api / python / etc / nf_resources . yml Run this command if to keep RG (replace \"RG Region\" with your RG's region, e.g. centralus) terraform state rm module.\"RG Region\"_rg.azurerm_resource_group.terraformgroup Once the script is finished, all the resources in NF Console and Azure RG will have been deployed. Note If something went wrong, please check logoutput.txt file generated in the root directory for details on any errors that may have occurred during the deployment. Create Windows Client via Powershell @ This section provides the powershell code to spin up a NF client with the name as computer name fetched by PS script. Example Here are the parameters used in the script few needs to be changed to suit your need for eg. network_name and region_ name. clientId /secret : from NF console steps below. environment : Production network_name : e.g. DemoNet01 audience : URI for the Auth0 api_endpoint : URI for the API calls region_name : The region_name is the reference region or location where client will be created (reference closest AWS location) e.g.us-east-1 provider : AWS To create a unique client we can use second half of computer name below powershell cmdlet will fetch the same. #Set Endpoint name to second half of computer name: $endpoint_name = $ENV:COMPUTERNAME . Split ( \"-\" )[- 1 ] This section creates an access token by an api call using parameters defined earlier. # Get a auth token from Auth0 $auth_payload = @{ client_id = $client_id client_secret = $client_secret audience = $audience grant_type = 'client_credentials' } $auth_json = $auth_payload | ConvertTo-Json $post_uri = \"https://netfoundry-\" + $environment + \".auth0.com/oauth/token\" $auth0_response = Invoke-RestMethod -Method Post -Uri $post_uri -ContentType 'application/json' -Body $auth_json $token = $auth0_response . access_token #Inserting auth token to headers for API calls $headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\" $headers . add ( \"Authorization\" , ( \"Bearer \" + $token )) This is how to get datacenterId and networkId which basically makes an API call to strips off unwanted information. This information will be used to create client later. # Get a dataCenter ID: $datacenter_uri = $api_endpoint + \"/dataCenters\" $dataCenter_response = Invoke-RestMethod -Method Get -Uri $datacenter_uri -ContentType 'application/json' -Headers $headers $dataCenter = $dataCenter_response . _embedded . dataCenters | where { $_ . locationCode -like $region_name -and $_ . provider -like $provider } | select _links $dataCenterId = ( $dataCenter . _links . self . href ). Split ( \"/\" )[- 1 ] # Get a Network ID: $network_uri = $api_endpoint + \"/networks\" $network_response = Invoke-RestMethod -Method Get -Uri $network_uri -ContentType 'application/json' -Headers $headers $network = $network_response . _embedded . networks | where { $_ . name -like $network_name } | select _links $networkrId = ( $network . _links . self . href ). Split ( \"/\" )[- 1 ] Below section of the script uses computername, networkId and datacenterId from above sections to make API call create a NF client and fetch the regitration key. # Create an Endpoint & get reg key $endpoint_uri = $api_endpoint + \"/networks/\" + $networkrId + \"/endpoints\" $endpoint_payload = @{ name = $endpoint_name endpointType = \"CL\" dataCenterId = $dataCenterId } $endpoint_json = $endpoint_payload | ConvertTo-Json $endpoint_response = Invoke-RestMethod -Method Post -Uri $endpoint_uri -ContentType 'application/json' -Body $endpoint_json -Headers $headers $endpoint_registration_key = $endpoint_response . registrationKey This section will run a registration script silently to register the NF client. # Run registration script Start-Process -FilePath C : \\ \"Program Files\" \\ DVN \\ vtc_app \\ nfnreg $endpoint_registration_key Once you download PS script onto your laptop and update it with your network details, run the following in the directory containing the script: .\\NF-pwrshell.ps1 Update the following section of the resources.yaml file referenced at the beginning of the last section. appwans : - action : create endpoints : - \"your endpoint name\" Run resources.py script to add the newly created endpoint to the same AppWan. python3 quickstarts / docs / api / python / source / netfoundry / nf_resources . py -- file quickstarts / docs / api / python / etc / nf_resources . yml Once endpoint is added to the AppWan, here is what the services tab should look like. Performance Testing @ Verifying the performance through testing Note Recommended way of accessing Ondrive is through the Windows App with File Explorer. If access to OneDrive is required using a browser than Firefox is recommended by NetFoundry to get best performance. Map your Business OneDrive to your local file system if not already done so. Make sure the NF App is enabled. Transfer large files between remote and local drive to test the performance. Disable the NF App and repeat the previous step to compare the performance. The performance should be at least the same if not better. Programmatically @ Delete via Python and Terraform @ Steps Change all actions to delete in quickstarts/docs/api/python/etc/nf_resources.yml as so: environment : production network_action : delete network_name : NetworkO365 gateway_list : - action : delete cloud : azure count : 1 names : - GATEWAY-O365-01 region : eastus regionalCidr : - 10.20.10.0/24 regkeys : [] resourceGroup : name : RG_O365_Demo region : centralus tag : null services : - action : delete gateway : GATEWAY-O365-01 name : SharePointOneDrive01 netCidr : 22 netIp : 13.107.136.0 type : network - action : delete gateway : GATEWAY-O365-01 name : SharePointOneDrive02 netCidr : 17 netIp : 40.108.128.0 type : network - action : delete gateway : GATEWAY-O365-01 name : SharePointOneDrive03 netCidr : 14 netIp : 52.104.0.0 type : network - action : delete gateway : GATEWAY-O365-01 name : SharePointOneDrive04 netCidr : 17 netIp : 104.146.128.0 type : network - action : delete gateway : GATEWAY-O365-01 name : SharePointOneDrive05 netCidr : 22 netIp : 150.171.40.0 type : network appwans : - action : delete endpoints : [] name : AppWanSharepoint services : - SharePointOneDrive01 - SharePointOneDrive02 - SharePointOneDrive03 - SharePointOneDrive04 - SharePointOneDrive05 terraform : bin : terraform output : 'no' source : ./quickstarts/docs/terraform work_dir : . Run this from the root folder (mop) to delete network, gateway, services, and appwan through NF API and destroy Virtual Machine hosting NF Gateway in your Azure RG. python3 quickstarts / docs / api / python / source / netfoundry / nf_resources . py -- file quickstarts / docs / api / python / etc / nf_resources . yml","title":"MS Office 365 Optimize"},{"location":"azure/o365-optimization/#overview","text":"We will guide users how to deploy a NF Gateway to optimize the connectivity to Microsoft O365 Services. The services that will be optimized are share-point and one-drive Microsoft deployed content delivery network (CDN), where they offer many entry points around the World to access Office 365 Services like sharepoint, onedrive, etc. By providing these \"front doors\" (also known as) to O365 services, MS wanted to improve user experience by optimizing reach-ability and access. With that in mind, Microsoft is pushing Enterprises to utilize this CDN by creating O365 bypass at the edge of the Enterprise Network. The bypass is a configuration change, where a policy routing is enforced to allow the 0365 services to be short circuited to the Internet. The idea is to avoid going through a central location, where all content is inspected and checked for security threats before released to World Wide Web. NetFoundry Edge has the ability to provide such bypass if desired, but in this Quickstart we are showing how our customers can configure NF Network to complement the MS CDN, utilize their optimization and still keep using NF Secure tunnels for connectivity.","title":"Overview"},{"location":"azure/o365-optimization/#find_the_closest_front_door","text":"Microsoft created an online tool to test from user's location, where the best entry to their Network is. Please open a browser on your windows computer and type the following url https://connectivity.office.com/. As it is stated there, click on the location icon. Once the test is finished, it will show where the closest location is. In our example, the user's closest location is Ashburn, VA (Azure USEAST). Select Region Make sure you replace \"Your Region\" with the location of Azure DC given by the location tool. Most of the time, our Orchestration Platform will optimize the network to provide direct connectivity from where you are and Azure GW you are about to create. We will test if that is the case. We continuously update our optimization algorithm to pick the best path all the time based on ongoing data collection and feedback from the network fabric.","title":"Find the Closest Front Door"},{"location":"azure/o365-optimization/#through_nf_web_console_ui","text":"","title":"Through NF Web Console UI"},{"location":"azure/o365-optimization/#create_and_deploy_nf_azure_gateway","text":"This section will guide a user through the steps on how to create a NF Manage Gateway in the NF Console UI and install it in the Azure vNet. Console UI Navigate to Manage Gateways Page Click on + sign in the top right corner. Click on \"Create Gateway\" on the Azure Cloud Gateway Card Fill in the required information and click on \"Create\" Copy the Client Registration Key Click on \"Deploy to Microsoft Azure\". It will take you to the Azure Portal and ask you for your login credentials. You will be presented with the template that needs to be filled. The first section is the Basics regarding your Subscription and Resource Group this gateway will be deployed in. The second section related to resources associated with this gateway. e.g. vm name, ip address space, security groups, etc. you will paste the registration key copied in step 5. You will also need the public ssh key to use for access to this gateway remotely. You will need to agree to Azure Marketplace Terms and Conditions and click to \"Purchase\" to continue. If the NF Gateway was deployed successfully. Here is the view of the Resource Group and NF Conole UI. Done Create SharePoint & OneDrive Services Once can find the ip address that are allocated by Microsoft for SharePoint and OneDrive service. Click on this link and write them down We only required to use \"Optimize Required\" (ID 31), and they are 13.107.136.0/22, 40.108.128.0/17, 52.104.0.0/14, 104.146.128.0/17, 150.171.40.0/22. Create 5 services by repeating the next section for each of them. Replace Network Address in Step 4 with the ones above and Intercept Ports with 80, 443.","title":"Create and Deploy NF Azure Gateway"},{"location":"azure/o365-optimization/#create_ip_network_service","text":"This section will guide a user through the steps on how to create a NF Service. Console UI Navigate to Manage Services Page under Manage Appwans Click on + sign in the top right corner. Click on \"Create an IP Network Service\" Fill in the required information for the Network your wanting to access. Important Please make sure the service you want to access is behind the gateway you specify here. If successfully, the service is green. Done All services configured.","title":"Create IP Network Service"},{"location":"azure/o365-optimization/#create_appwan","text":"This section will guide a user through the steps on how to enable service connectivity to users by creating an appwan. Console UI Navigate to Manage AppWANS Page under Manage Appwans Click on + sign in the top right corner. Click on \"Component Builder Appwan\" Move the desired gateway (e.g. DemoGateway01) from \"Available\" Gateways to \"Selected\" Endpoints. Move the desired service (e.g. DemoServiceSsh) from \"Available\" to \"Selected\" Services. Click on \"Create\". Done AppWan successfully configured would look like this.","title":"Create AppWan"},{"location":"azure/o365-optimization/#create_and_install_nf_client","text":"This section will guide a user through the steps on how to create a client in the NF Console UI. Then, it will provide links to Guides on how to install the NetFoundry Client Software for Windows and MAC Clients, including the registration with the NF Network Fabric. Console UI Navigate to Manage Clients Page Click on + sign in the top right corner. Fill in the required information and click on \"Create\" Copy the Client Registration Key Install the NF Client Software by following the directions at the appropriate OS link Window Mac Add this Endpoint to the AppWan Once endpoint is added to the AppWan, here is what the services tab should look like.","title":"Create and install NF Client"},{"location":"azure/o365-optimization/#programmatically","text":"","title":"Programmatically"},{"location":"azure/o365-optimization/#create_via_python_and_terraform","text":"Python Modules For the code clarity, we have broken down the code into multiple Python modules NF REST CRUD (Create,Read, Update and Delete) operations Get MOP Session Token Create NF Network Create NF Gateway(s) Create NF Service(s) Create NF AppWan(s) Wrapper Script to Create NF Resources based on Resource yaml file Environment Setup Requirements ~/.env to store NF Credentials in (e.g. clientId, clientSecret ) to obtain a session token for NF API Export Azure Credentials (e.g, export ARM_TENANT_ID, ARM_CLIENT_ID, ARM_CLIENT_SECRET, ARM_SUBSCRIPTION_ID ) to enable resource gateway creation in Azure Resource Group via Terraform. Terraform and Python3 installed in path. Additional Information: The new Resource Group in Azure is created based on then name provided in Resource yml , if one does not exist already in the same region (e.g. centralus). The action delete gateway will delete the RG as well even if it was an existing RG. If one does not want to delete the RG, the command terraform state rm \"{tf resource name for RG}\" needs to be run before running the gateway delete step. This will ensure that the RG is not deleted. A new vNet will be created and NF Gateway will be placed in it. Environment means the NF Console Environment used (e.g. production), not Azure. Steps Clone this repo (git clone https://github.com/netfoundry/mop.git) Change directory to mop: cd mop Update quickstarts/docs/api/python/etc/nf_resources.yml as so: environment : production network_action : create network_name : NetworkO365 gateway_list : - action : create cloud : azure count : 1 names : - GATEWAY-O365-01 region : \"region found by the connectivity test, e.g. eastus\" regionalCidr : - 10.20.10.0/24 regkeys : [] resourceGroup : name : \"you resource RG Name\" region : \"region of your RG\" tag : null services : - action : create gateway : GATEWAY-O365-01 name : SharePointOneDrive01 netCidr : 22 netIp : 13.107.136.0 type : network - action : create gateway : GATEWAY-O365-01 name : SharePointOneDrive02 netCidr : 17 netIp : 40.108.128.0 type : network - action : create gateway : GATEWAY-O365-01 name : SharePointOneDrive03 netCidr : 14 netIp : 52.104.0.0 type : network - action : create gateway : GATEWAY-O365-01 name : SharePointOneDrive04 netCidr : 17 netIp : 104.146.128.0 type : network - action : create gateway : GATEWAY-O365-01 name : SharePointOneDrive05 netCidr : 22 netIp : 150.171.40.0 type : network appwans : - action : create endpoints : [] name : AppWanSharepoint services : - SharePointOneDrive01 - SharePointOneDrive02 - SharePointOneDrive03 - SharePointOneDrive04 - SharePointOneDrive05 terraform : bin : terraform output : 'no' source : ./quickstarts/docs/terraform work_dir : . Run this from the root folder (mop) to create network, gateway, services, and appwan throuhg NF API and deploy Virtual Machine to host NF Gateway in your Azure RG. python3 quickstarts / docs / api / python / source / netfoundry / nf_resources . py -- file quickstarts / docs / api / python / etc / nf_resources . yml Run this command if to keep RG (replace \"RG Region\" with your RG's region, e.g. centralus) terraform state rm module.\"RG Region\"_rg.azurerm_resource_group.terraformgroup Once the script is finished, all the resources in NF Console and Azure RG will have been deployed. Note If something went wrong, please check logoutput.txt file generated in the root directory for details on any errors that may have occurred during the deployment.","title":"Create via Python and Terraform"},{"location":"azure/o365-optimization/#create_windows_client_via_powershell","text":"This section provides the powershell code to spin up a NF client with the name as computer name fetched by PS script. Example Here are the parameters used in the script few needs to be changed to suit your need for eg. network_name and region_ name. clientId /secret : from NF console steps below. environment : Production network_name : e.g. DemoNet01 audience : URI for the Auth0 api_endpoint : URI for the API calls region_name : The region_name is the reference region or location where client will be created (reference closest AWS location) e.g.us-east-1 provider : AWS To create a unique client we can use second half of computer name below powershell cmdlet will fetch the same. #Set Endpoint name to second half of computer name: $endpoint_name = $ENV:COMPUTERNAME . Split ( \"-\" )[- 1 ] This section creates an access token by an api call using parameters defined earlier. # Get a auth token from Auth0 $auth_payload = @{ client_id = $client_id client_secret = $client_secret audience = $audience grant_type = 'client_credentials' } $auth_json = $auth_payload | ConvertTo-Json $post_uri = \"https://netfoundry-\" + $environment + \".auth0.com/oauth/token\" $auth0_response = Invoke-RestMethod -Method Post -Uri $post_uri -ContentType 'application/json' -Body $auth_json $token = $auth0_response . access_token #Inserting auth token to headers for API calls $headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\" $headers . add ( \"Authorization\" , ( \"Bearer \" + $token )) This is how to get datacenterId and networkId which basically makes an API call to strips off unwanted information. This information will be used to create client later. # Get a dataCenter ID: $datacenter_uri = $api_endpoint + \"/dataCenters\" $dataCenter_response = Invoke-RestMethod -Method Get -Uri $datacenter_uri -ContentType 'application/json' -Headers $headers $dataCenter = $dataCenter_response . _embedded . dataCenters | where { $_ . locationCode -like $region_name -and $_ . provider -like $provider } | select _links $dataCenterId = ( $dataCenter . _links . self . href ). Split ( \"/\" )[- 1 ] # Get a Network ID: $network_uri = $api_endpoint + \"/networks\" $network_response = Invoke-RestMethod -Method Get -Uri $network_uri -ContentType 'application/json' -Headers $headers $network = $network_response . _embedded . networks | where { $_ . name -like $network_name } | select _links $networkrId = ( $network . _links . self . href ). Split ( \"/\" )[- 1 ] Below section of the script uses computername, networkId and datacenterId from above sections to make API call create a NF client and fetch the regitration key. # Create an Endpoint & get reg key $endpoint_uri = $api_endpoint + \"/networks/\" + $networkrId + \"/endpoints\" $endpoint_payload = @{ name = $endpoint_name endpointType = \"CL\" dataCenterId = $dataCenterId } $endpoint_json = $endpoint_payload | ConvertTo-Json $endpoint_response = Invoke-RestMethod -Method Post -Uri $endpoint_uri -ContentType 'application/json' -Body $endpoint_json -Headers $headers $endpoint_registration_key = $endpoint_response . registrationKey This section will run a registration script silently to register the NF client. # Run registration script Start-Process -FilePath C : \\ \"Program Files\" \\ DVN \\ vtc_app \\ nfnreg $endpoint_registration_key Once you download PS script onto your laptop and update it with your network details, run the following in the directory containing the script: .\\NF-pwrshell.ps1 Update the following section of the resources.yaml file referenced at the beginning of the last section. appwans : - action : create endpoints : - \"your endpoint name\" Run resources.py script to add the newly created endpoint to the same AppWan. python3 quickstarts / docs / api / python / source / netfoundry / nf_resources . py -- file quickstarts / docs / api / python / etc / nf_resources . yml Once endpoint is added to the AppWan, here is what the services tab should look like.","title":"Create Windows Client via Powershell"},{"location":"azure/o365-optimization/#performance_testing","text":"Verifying the performance through testing Note Recommended way of accessing Ondrive is through the Windows App with File Explorer. If access to OneDrive is required using a browser than Firefox is recommended by NetFoundry to get best performance. Map your Business OneDrive to your local file system if not already done so. Make sure the NF App is enabled. Transfer large files between remote and local drive to test the performance. Disable the NF App and repeat the previous step to compare the performance. The performance should be at least the same if not better.","title":"Performance Testing"},{"location":"azure/o365-optimization/#programmatically_1","text":"","title":"Programmatically"},{"location":"azure/o365-optimization/#delete_via_python_and_terraform","text":"Steps Change all actions to delete in quickstarts/docs/api/python/etc/nf_resources.yml as so: environment : production network_action : delete network_name : NetworkO365 gateway_list : - action : delete cloud : azure count : 1 names : - GATEWAY-O365-01 region : eastus regionalCidr : - 10.20.10.0/24 regkeys : [] resourceGroup : name : RG_O365_Demo region : centralus tag : null services : - action : delete gateway : GATEWAY-O365-01 name : SharePointOneDrive01 netCidr : 22 netIp : 13.107.136.0 type : network - action : delete gateway : GATEWAY-O365-01 name : SharePointOneDrive02 netCidr : 17 netIp : 40.108.128.0 type : network - action : delete gateway : GATEWAY-O365-01 name : SharePointOneDrive03 netCidr : 14 netIp : 52.104.0.0 type : network - action : delete gateway : GATEWAY-O365-01 name : SharePointOneDrive04 netCidr : 17 netIp : 104.146.128.0 type : network - action : delete gateway : GATEWAY-O365-01 name : SharePointOneDrive05 netCidr : 22 netIp : 150.171.40.0 type : network appwans : - action : delete endpoints : [] name : AppWanSharepoint services : - SharePointOneDrive01 - SharePointOneDrive02 - SharePointOneDrive03 - SharePointOneDrive04 - SharePointOneDrive05 terraform : bin : terraform output : 'no' source : ./quickstarts/docs/terraform work_dir : . Run this from the root folder (mop) to delete network, gateway, services, and appwan through NF API and destroy Virtual Machine hosting NF Gateway in your Azure RG. python3 quickstarts / docs / api / python / source / netfoundry / nf_resources . py -- file quickstarts / docs / api / python / etc / nf_resources . yml","title":"Delete via Python and Terraform"},{"location":"common/azure-environment-setup-note/","text":"Environment Setup Requirements ~/.env to store NF Credentials in (e.g. clientId, clientSecret ) to obtain a session token for NF API Export Azure Credentials (e.g, export ARM_TENANT_ID, ARM_CLIENT_ID, ARM_CLIENT_SECRET, ARM_SUBSCRIPTION_ID ) to enable resource gateway creation in Azure Resource Group via Terraform. Terraform and Python3 installed in path. Additional Information: The new Resource Group in Azure is created based on then name provided in Resource yml , if one does not exist already in the same region (e.g. centralus). The action delete gateway will delete the RG as well even if it was an existing RG. If one does not want to delete the RG, the command terraform state rm \"{tf resource name for RG}\" needs to be run before running the gateway delete step. This will ensure that the RG is not deleted. A new vNet will be created and NF Gateway will be placed in it. Environment means the NF Console Environment used (e.g. production), not Azure.","title":"Azure environment setup note"},{"location":"common/byol-important/","text":"Important The BYOL (Bring Your Own License) licensing model is one that relies on your purchasing a software license separately from our website here and registering your appliance with generated one time key.","title":"Byol important"},{"location":"common/create-appwan-client/","text":"Create AppWan @ This section will guide a user through the steps on how to enable service connectivity to users by creating an appwan. Console UI Navigate to Manage AppWANS Page under Manage Appwans Click on + sign in the top right corner. Click on \"Component Builder Appwan\" Move the desired client (e.g. DemoClient01) from \"Available\" Clients to \"Selected\" Endpoints. Move the desired service (e.g. DemoServiceSsh) from \"Available\" to \"Selected\" Services. Click on \"Create\". Done","title":"Create appwan client"},{"location":"common/create-appwan-client/#create_appwan","text":"This section will guide a user through the steps on how to enable service connectivity to users by creating an appwan. Console UI Navigate to Manage AppWANS Page under Manage Appwans Click on + sign in the top right corner. Click on \"Component Builder Appwan\" Move the desired client (e.g. DemoClient01) from \"Available\" Clients to \"Selected\" Endpoints. Move the desired service (e.g. DemoServiceSsh) from \"Available\" to \"Selected\" Services. Click on \"Create\". Done","title":"Create AppWan"},{"location":"common/create-appwan-gateway/","text":"Create AppWan @ This section will guide a user through the steps on how to enable service connectivity to users by creating an appwan. Console UI Navigate to Manage AppWANS Page under Manage Appwans Click on + sign in the top right corner. Click on \"Component Builder Appwan\" Move the desired gateway (e.g. DemoGateway01) from \"Available\" Gateways to \"Selected\" Endpoints. Move the desired service (e.g. DemoServiceSsh) from \"Available\" to \"Selected\" Services. Click on \"Create\". Done","title":"Create appwan gateway"},{"location":"common/create-appwan-gateway/#create_appwan","text":"This section will guide a user through the steps on how to enable service connectivity to users by creating an appwan. Console UI Navigate to Manage AppWANS Page under Manage Appwans Click on + sign in the top right corner. Click on \"Component Builder Appwan\" Move the desired gateway (e.g. DemoGateway01) from \"Available\" Gateways to \"Selected\" Endpoints. Move the desired service (e.g. DemoServiceSsh) from \"Available\" to \"Selected\" Services. Click on \"Create\". Done","title":"Create AppWan"},{"location":"common/create-aws-gateway/","text":"Create and Install NF AWS Gateway @ This section will guide a user through the steps on how to create a NF Manage Gateway in the NF Console UI and install it in an AWS VPC. Console UI Navigate to Manage Gateways Page Click on + sign in the top right corner. Click on \"Create Gateway\" on the AWS Cloud Gateway Card Fill in the required information and click on \"Create\" Note If this is the first time you've ever launched an AWS NetFoundry Gateway You must accept the AWS license before launching the gateway, please click here: AWS Marketplace Click on \"Launch Gateway Using CloudFormation Script\". It will take you to the AWS console, if you're not already logged in it will ask you for your login credentials. You will be presented with the template parameters that needs to be filled. Fill in the AWS Parameters Section with you're VPC & ssh keyname & Click Create Stack. If the NF Gateway was deployed successfully. Here is the view of the NF Conole UI. Done","title":"Create aws gateway"},{"location":"common/create-aws-gateway/#create_and_install_nf_aws_gateway","text":"This section will guide a user through the steps on how to create a NF Manage Gateway in the NF Console UI and install it in an AWS VPC. Console UI Navigate to Manage Gateways Page Click on + sign in the top right corner. Click on \"Create Gateway\" on the AWS Cloud Gateway Card Fill in the required information and click on \"Create\" Note If this is the first time you've ever launched an AWS NetFoundry Gateway You must accept the AWS license before launching the gateway, please click here: AWS Marketplace Click on \"Launch Gateway Using CloudFormation Script\". It will take you to the AWS console, if you're not already logged in it will ask you for your login credentials. You will be presented with the template parameters that needs to be filled. Fill in the AWS Parameters Section with you're VPC & ssh keyname & Click Create Stack. If the NF Gateway was deployed successfully. Here is the view of the NF Conole UI. Done","title":"Create and Install NF AWS Gateway"},{"location":"common/create-azure-gateway/","text":"Create and Deploy NF Azure Gateway @ This section will guide a user through the steps on how to create a NF Manage Gateway in the NF Console UI and install it in the Azure vNet. Console UI Navigate to Manage Gateways Page Click on + sign in the top right corner. Click on \"Create Gateway\" on the Azure Cloud Gateway Card Fill in the required information and click on \"Create\" Copy the Client Registration Key Click on \"Deploy to Microsoft Azure\". It will take you to the Azure Portal and ask you for your login credentials. You will be presented with the template that needs to be filled. The first section is the Basics regarding your Subscription and Resource Group this gateway will be deployed in. The second section related to resources associated with this gateway. e.g. vm name, ip address space, security groups, etc. you will paste the registration key copied in step 5. You will also need the public ssh key to use for access to this gateway remotely. You will need to agree to Azure Marketplace Terms and Conditions and click to \"Purchase\" to continue. If the NF Gateway was deployed successfully. Here is the view of the Resource Group and NF Conole UI. Done","title":"Create azure gateway"},{"location":"common/create-azure-gateway/#create_and_deploy_nf_azure_gateway","text":"This section will guide a user through the steps on how to create a NF Manage Gateway in the NF Console UI and install it in the Azure vNet. Console UI Navigate to Manage Gateways Page Click on + sign in the top right corner. Click on \"Create Gateway\" on the Azure Cloud Gateway Card Fill in the required information and click on \"Create\" Copy the Client Registration Key Click on \"Deploy to Microsoft Azure\". It will take you to the Azure Portal and ask you for your login credentials. You will be presented with the template that needs to be filled. The first section is the Basics regarding your Subscription and Resource Group this gateway will be deployed in. The second section related to resources associated with this gateway. e.g. vm name, ip address space, security groups, etc. you will paste the registration key copied in step 5. You will also need the public ssh key to use for access to this gateway remotely. You will need to agree to Azure Marketplace Terms and Conditions and click to \"Purchase\" to continue. If the NF Gateway was deployed successfully. Here is the view of the Resource Group and NF Conole UI. Done","title":"Create and Deploy NF Azure Gateway"},{"location":"common/create-azurestack-gateway/","text":"2.1 Create an Azure Stack Gateway in the NetFoundry Console @ Sign in to your NetFoundry organization; Navigate to the Gateways page and create a new Azure Stack gateway. Give it a name and location, then click the Create button; Take note of the registration key. You will need it to register the gateway later.","title":"Create azurestack gateway"},{"location":"common/create-azurestack-gateway/#21_create_an_azure_stack_gateway_in_the_netfoundry_console","text":"Sign in to your NetFoundry organization; Navigate to the Gateways page and create a new Azure Stack gateway. Give it a name and location, then click the Create button; Take note of the registration key. You will need it to register the gateway later.","title":"2.1 Create an Azure Stack Gateway in the NetFoundry Console"},{"location":"common/create-ip-host-service/","text":"Create IP Host Service @ This section will guide a user through the steps on how to create a NF Service. Console UI Navigate to Manage Services Page under Manage Appwans Click on + sign in the top right corner. Click on \"Create an IP Host Service\" Fill in the required information for SSH and click on \"Create\" If successfully, the service is green. Done","title":"Create ip host service"},{"location":"common/create-ip-host-service/#create_ip_host_service","text":"This section will guide a user through the steps on how to create a NF Service. Console UI Navigate to Manage Services Page under Manage Appwans Click on + sign in the top right corner. Click on \"Create an IP Host Service\" Fill in the required information for SSH and click on \"Create\" If successfully, the service is green. Done","title":"Create IP Host Service"},{"location":"common/create-ip-network-service/","text":"Create IP Network Service @ This section will guide a user through the steps on how to create a NF Service. Console UI Navigate to Manage Services Page under Manage Appwans Click on + sign in the top right corner. Click on \"Create an IP Network Service\" Fill in the required information for the Network your wanting to access. Important Please make sure the service you want to access is behind the gateway you specify here. If successfully, the service is green. Done","title":"Create ip network service"},{"location":"common/create-ip-network-service/#create_ip_network_service","text":"This section will guide a user through the steps on how to create a NF Service. Console UI Navigate to Manage Services Page under Manage Appwans Click on + sign in the top right corner. Click on \"Create an IP Network Service\" Fill in the required information for the Network your wanting to access. Important Please make sure the service you want to access is behind the gateway you specify here. If successfully, the service is green. Done","title":"Create IP Network Service"},{"location":"common/create-private-gateway/","text":"Create and Deploy NF Gateway in Branch Datacenter @ This section will guide a user through the steps on how to create a NF Manage Gateway in the NF Console UI and install it in the Branch Datacenter. Console UI Navigate to Manage Gateways Page Click on + sign in the top right corner. Click on \"Create Gateway\" on the VCPE Gateway Card Fill in the required information and click on \"Create\" Copy the Client Registration Key Click on \"Download\" button on the Installation Package Card Download the correct image for the desired Hypervisor. Follow the installation procedure linked in the description of each image type (i.e. \"Click Here\"). Once installed, login into it locally with ssh and register it using the key copied in the previous step. Run the following command sudo nfnreg \"reg key\" Once registered, one should see the gateway status turn to green in NF Console UI Done","title":"Create private gateway"},{"location":"common/create-private-gateway/#create_and_deploy_nf_gateway_in_branch_datacenter","text":"This section will guide a user through the steps on how to create a NF Manage Gateway in the NF Console UI and install it in the Branch Datacenter. Console UI Navigate to Manage Gateways Page Click on + sign in the top right corner. Click on \"Create Gateway\" on the VCPE Gateway Card Fill in the required information and click on \"Create\" Copy the Client Registration Key Click on \"Download\" button on the Installation Package Card Download the correct image for the desired Hypervisor. Follow the installation procedure linked in the description of each image type (i.e. \"Click Here\"). Once installed, login into it locally with ssh and register it using the key copied in the previous step. Run the following command sudo nfnreg \"reg key\" Once registered, one should see the gateway status turn to green in NF Console UI Done","title":"Create and Deploy NF Gateway in Branch Datacenter"},{"location":"common/fabric-client-important/","text":"Important Assumption is that the NF Fabric is already up and the NF Client is installed.","title":"Fabric client important"},{"location":"common/fabric-only-important/","text":"Important Assumption is that the NF Fabric is already up.","title":"Fabric only important"},{"location":"common/install-jenkins/","text":"Jenkins Requirements java docker Then follow jenkins installation using docker to install Jenkins on the localhost and choose \"Install suggested plugins\". After successful installation, one should be able to reach the Jenkins Dashboard (8080 is default port). Note If one wants to add the gateway deployed in the Private DataCenter and/or NF Client, it must be created prior to running the next steps. Otherwise the options of APPWAN_PRIVATE_GATEWAY and APPWAN_PRIVATE_CLIENT can be left blank and added after the appwan is created using the steps described in the Console UI section above. GATEWAY_NAME and SERVICE_NAME are automatically generated by the scripts in this version. GATEWAY_NAME = \"GW TYPE\"+x0x+\"LOCATION OF AZURE GW\", e.g. AZCPEGWx0xWESTUS; SERVICE_NAME = \"GW NAME\"--\"SERVICE IP\"--\"SERVICE PORT\", e.g. AZCPEGWx0xWESTUS--10.20.10.5--22. Setting Up Jenkins Pipeline Login to Jenkins Click on \" New Item\" Name you Project, select pipeline option and click \"Ok\" In the pipeline details, fill in the scm details as seen in the image below and click \"Save\". Everything default apart from: Repository Url: https://github.com/netfoundry/mop.git Script Path: pipeline/netfoundrydeploy2cloud.jenkinsfile Set up users for Azure API and NF MOP API access -- More on Credentials setup Run Jenkinsjob by selecting on the pipeline created in the previous step. Click on \"Build with Parameters\" To create the resources Fill in the Azure Details (e.g. RG, Tenant Id, etc) and select the following: NF Environment, e.g. production NETWORK_ACTION - create NETWORK_NAME, e.g. DEMONET GATEWAY_ACTION - create If Azure RG needs to be preserved, then KEEP_RG option must be left checked. LOCATION, e.g. westus - location where the Azure GW will be deployed in SUBNET_PREFIX, e.g. 10.20.10.0/24 - the subnet used for the vNet in the location of the Azure GW deployment. Run Jenkins job again by selecting on the pipeline created in the previous step. Click on \"Build with Parameters\" Fill in service and appwan details by selecting the following: KEEP_RG - not selected NF Environment, e.g. production SERVICE_ACTION - create APPWAN_ACTION - create GATEWAY_NAME, e.g. AZCPEGWx0xWESTUS (this is created in the previous step automatically) SERVICE_NAME, e.g. AZCPEGWx0xWESTUS--10.20.10.5--22 (this is created automatically during this step) SERVICE_IP, e.g. 10.20.10.5 SERVICE_PORT, e.g. 22 APPWAN_NAME, e.g. appwan-ssh-22 APPWAN_PRIVATE_GATEWAY, e.g. private-gateway-name (this is created outside of the jenkins job, prior to running this step) APPWAN_PRIVATE_CLIENT, e.g. client-name (this is created outside of the jenkins job, prior to running this step) APPWAN_SERVICE, e.g. AZCPEGWx0xWESTUS--10.20.10.5--22 To delete the resources Run Jenkins job again by selecting on the pipeline created in the previous step. Click on \"Build with Parameters\" Fill in the Azure Details (e.g. RG, Tenant Id, etc) and select the following: NF Environment, e.g. production NETWORK_ACTION - delete NETWORK_NAME, e.g. DEMONET GATEWAY_ACTION - delete Pipeline View Done","title":"Install jenkins"},{"location":"common/install-nf-client/","text":"Create and install NF Client @ This section will guide a user through the steps on how to create a client in the NF Console UI. Then, it will provide links to Guides on how to install the NetFoundry Client Software for Windows and MAC Clients, including the registration with the NF Network Fabric. Console UI Navigate to Manage Clients Page Click on + sign in the top right corner. Fill in the required information and click on \"Create\" Copy the Client Registration Key Install the NF Client Software by following the directions at the appropriate OS link Window Mac","title":"Install nf client"},{"location":"common/install-nf-client/#create_and_install_nf_client","text":"This section will guide a user through the steps on how to create a client in the NF Console UI. Then, it will provide links to Guides on how to install the NetFoundry Client Software for Windows and MAC Clients, including the registration with the NF Network Fabric. Console UI Navigate to Manage Clients Page Click on + sign in the top right corner. Fill in the required information and click on \"Create\" Copy the Client Registration Key Install the NF Client Software by following the directions at the appropriate OS link Window Mac","title":"Create and install NF Client"},{"location":"common/powershell-create-win-client/","text":"This section provides the powershell code to spin up a NF client with the name as computer name fetched by PS script. Example Here are the parameters used in the script few needs to be changed to suit your need for eg. network_name and region_ name. clientId /secret : from NF console steps below. environment : Production network_name : e.g. DemoNet01 audience : URI for the Auth0 api_endpoint : URI for the API calls region_name : The region_name is the reference region or location where client will be created (reference closest AWS location) e.g.us-east-1 provider : AWS To create a unique client we can use second half of computer name below powershell cmdlet will fetch the same. #Set Endpoint name to second half of computer name: $endpoint_name = $ENV:COMPUTERNAME . Split ( \"-\" )[- 1 ] This section creates an access token by an api call using parameters defined earlier. # Get a auth token from Auth0 $auth_payload = @{ client_id = $client_id client_secret = $client_secret audience = $audience grant_type = 'client_credentials' } $auth_json = $auth_payload | ConvertTo-Json $post_uri = \"https://netfoundry-\" + $environment + \".auth0.com/oauth/token\" $auth0_response = Invoke-RestMethod -Method Post -Uri $post_uri -ContentType 'application/json' -Body $auth_json $token = $auth0_response . access_token #Inserting auth token to headers for API calls $headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\" $headers . add ( \"Authorization\" , ( \"Bearer \" + $token )) This is how to get datacenterId and networkId which basically makes an API call to strips off unwanted information. This information will be used to create client later. # Get a dataCenter ID: $datacenter_uri = $api_endpoint + \"/dataCenters\" $dataCenter_response = Invoke-RestMethod -Method Get -Uri $datacenter_uri -ContentType 'application/json' -Headers $headers $dataCenter = $dataCenter_response . _embedded . dataCenters | where { $_ . locationCode -like $region_name -and $_ . provider -like $provider } | select _links $dataCenterId = ( $dataCenter . _links . self . href ). Split ( \"/\" )[- 1 ] # Get a Network ID: $network_uri = $api_endpoint + \"/networks\" $network_response = Invoke-RestMethod -Method Get -Uri $network_uri -ContentType 'application/json' -Headers $headers $network = $network_response . _embedded . networks | where { $_ . name -like $network_name } | select _links $networkrId = ( $network . _links . self . href ). Split ( \"/\" )[- 1 ] Below section of the script uses computername, networkId and datacenterId from above sections to make API call create a NF client and fetch the regitration key. # Create an Endpoint & get reg key $endpoint_uri = $api_endpoint + \"/networks/\" + $networkrId + \"/endpoints\" $endpoint_payload = @{ name = $endpoint_name endpointType = \"CL\" dataCenterId = $dataCenterId } $endpoint_json = $endpoint_payload | ConvertTo-Json $endpoint_response = Invoke-RestMethod -Method Post -Uri $endpoint_uri -ContentType 'application/json' -Body $endpoint_json -Headers $headers $endpoint_registration_key = $endpoint_response . registrationKey This section will run a registration script silently to register the NF client. # Run registration script Start-Process -FilePath C : \\ \"Program Files\" \\ DVN \\ vtc_app \\ nfnreg $endpoint_registration_key","title":"Powershell create win client"},{"location":"common/python-create-appwan/","text":"Update the Resoure.yaml file to include the AppWan option to create the NF AppWan tying the gateway, client and service created in the previous steps. Don't forget to change the action on the service option to \"get\". ``` yaml environment: production gateway_list: - action: get cloud: azure count: 1 names: - AZCPEGWx0xWESTUS region: westus regionalCidr: - 10.20.10.0/24 regkeys: - 21DB86724EC3F31C11C1C9D68CE5ECD6A06F057E resourceGroup: name: demoPythonTerraform01 region: centralus tag: TerraformDemo network_action: get network_name: DemoNet01 services: - action: get gateway: AZCPEGWx0xWESTUS ip: 10.20.10.5 name: AZCPEGWx0xWESTUS--10.20.10.5--22 port: 22 type: host terraform: bin: terraform output: 'no' source: ./quickstarts/docs/terraform work_dir: . appwans: - action: create endpoints: - BranchGatewayName - ClientName name: appwan-ssh-22 services: - AZCPEGWx0xWESTUS--10.20.10.5--22 ``` 1. After the script ran again successfully, the connectivity should have been up. ![Image](../images/CreateAppWan06.png)","title":"Python create appwan"},{"location":"common/python-create-gateway/","text":"Clone this repo (git clone https://github.com/netfoundry/mop.git) 1. Update [Resource yaml](../api/python/etc/nf_resources.yml) file with the desired options to feed into the wrapper script as described in the following code snippet. [All Resource.yml Options](README.md) 1. Run this from the root folder to create GW in NF Console UI and Azure. ``` python python3 quickstarts/docs/api/python/source/netfoundry/nf_resources.py --file quickstarts/docs/api/python/etc/nf_resources.yml ``` Required Configuration Parameters for Gateway Creation ``` yaml environment: production network_action: get network_name: DemoNet01 gateway_list: - action: create cloud: azure count: 1 names: [] region: westus regionalCidr: [10.20.10.0/24] regkeys: [] resourceGroup: name: demoPythonTerraform01 region: centralus tag: TerraformDemo terraform: bin: terraform output: 'no' source: ./quickstarts/docs/terraform work_dir: . ``` 1. After the script is run successfully, one can see that the gateway name and registration key were saved in Resource.yml file. The name is created automatically based on region and gateway type joined with x and gateway count (AZCPEGW means an azure type gateway in NF console). One can create more than one gateway in the same region by increasing the count to more than 1. ``` yaml environment: production gateway_list: - action: create cloud: azure count: 1 names: - AZCPEGWx0xWESTUS region: westus regionalCidr: - 10.20.10.0/24 regkeys: - 21DB86724EC3F31C11C1C9D68CE5ECD6A06F057E resourceGroup: name: demoPythonTerraform01 region: centralus tag: TerraformDemo network_action: get network_name: DemoNet01 terraform: bin: terraform output: 'no' source: ./quickstarts/docs/terraform work_dir: . ``` ![Image](../images/CreateManagedGatewayAzure11.png) ![Image](../images/CreateManagedGatewayAzure12.png)","title":"Python create gateway"},{"location":"common/python-create-service/","text":"Update the Resoure.yaml file to include the Service option to create the NF service on the gateway create in the previous step. Don't forget to change the action on the gateway to \"get\". ``` yaml environment: production gateway_list: - action: get cloud: azure count: 1 names: - AZCPEGWx0xWESTUS region: westus regionalCidr: - 10.20.10.0/24 regkeys: - 21DB86724EC3F31C11C1C9D68CE5ECD6A06F057E resourceGroup: name: demoPythonTerraform01 region: centralus tag: TerraformDemo network_action: get network_name: DemoNet01 terraform: bin: terraform output: 'no' source: ./quickstarts/docs/terraform work_dir: . services: - action: create gateway: AZCPEGWx0xWESTUS ip: 10.20.10.5 port: 22 name: type: host ``` 1. After the script run again successfully, the service section should have been populated with the service name as so. ``` yaml services: - action: create gateway: AZCPEGWx0xWESTUS ip: 10.20.10.5 name: AZCPEGWx0xWESTUS--10.20.10.5--22 port: 22 type: host ``` ![Image](../images/CreateService07.png)","title":"Python create service"},{"location":"common/python-delete-all/","text":"To delete resources created, just follow the reverse order. Change the action to delete for AppWans first, then other resources as indicated in the code snippets. ``` yaml appwans: - action: delete endpoints: - BranchGatewayName - ClientName name: null services: - AZCPEGWx0xWESTUS--10.20.10.5--22 ``` 1. Services ``` yaml services: - action: delete gateway: AZCPEGWx0xWESTUS ip: 10.20.10.5 name: null port: 22 type: host ``` 1. Endpoints - will delete all resources in Azure as well. 1. `terraform state rm \"{tf resource name for RG}\" // run this before the python script if Resource Group needs to be preserved` 1. ``` yaml gateway_list: - action: delete cloud: azure count: 1 names: [] region: westus regionalCidr: - 10.20.10.0/24 regkeys: [] resourceGroup: name: demoPythonTerraform01 region: centralus tag: TerraformDemo ``` 1. Network ``` yaml environment: production network_action: delete network_name: DemoNet01 ``` 1. Done","title":"Python delete all"},{"location":"common/python-module-note/","text":"Python Modules For the code clarity, we have broken down the code into multiple Python modules NF REST CRUD (Create,Read, Update and Delete) operations Get MOP Session Token Create NF Network Create NF Gateway(s) Create NF Service(s) Create NF AppWan(s) Wrapper Script to Create NF Resources based on Resource yaml file","title":"Python module note"},{"location":"gcp/getting-started/","text":"Overview @ This getting started guide will explain how to launch a NetFoundry application gateway in the GCP compute engine. Launching an instance in GCP @ Pre Deployment @ Important The BYOL (Bring Your Own License) licensing model is one that relies on your purchasing a software license separately from our website here and registering your appliance with generated one time key. Important Assumption is that the NF Fabric is already up. Deployment of Appliance @ To get started, visit the GCP Marketplace site by clicking here . If the marketplace doesn't come up, you can go to the search bar that appears, enter NetFoundry Application Gateway and click the resulting solution that appears. To launch the instance Click on \"Launch On Compute Engine\" Supply the information needed Launch Options @ Deployment name : Specify the name of the instance you would like to use. Zone : Specify the region you would like to launch your appliance. Machine type : The instance type and size for your appliance. For optimal performance, it is recommended that small (2 vCPU/8 GB RAM) is chosen, or better. Boot disk type : SSD Persistent Disk is appropriate for the appliance since there is minimal disk I/O for the instance. Boot disk size in GB : The instance by default comes with a 10 GB boot disk. SSH instance level key : (OPTIONAL)If you would like to apply an instance level ssh key. Block project wide ssh keys : (OPTIONAL) If you would like to prevent the project keys from being applied to this instance. Network name / Subnet name : The network you would like to place your appliance in. Firewall : (OPTIONAL) If you would like to allow ssh access to your instance, please check the box & fill out the restricted source ip/networks. We do not recommend leaving this open to 0.0.0.0/0 if you choose this option. IP forwarding : Must be set to on, if you would like to reach applications within your networks. GatewayRegistrationKey : (OPTIONAL) This field allows you provide the gateway registration key that will passed into the launching image. Automating the registration portion of the setup. You can access the gateway via ssh & register after this deployment is complete. Learn how to get a registration key here . Once the fields have been supplied, Click on \"Deploy\" Post Deployment @ If you did not supply the GatewayRegistrationKey field during the deployment, you can access the machine via ssh by Clicking on the \"SSH\" button. OR You can optionally access this from other ssh point if you enabled the firewall rules to do so. Use the following command to register the gateway with your network: sudo nfnreg {registration key} Setup is complete.","title":"Getting Started Guide"},{"location":"gcp/getting-started/#overview","text":"This getting started guide will explain how to launch a NetFoundry application gateway in the GCP compute engine.","title":"Overview"},{"location":"gcp/getting-started/#launching_an_instance_in_gcp","text":"","title":"Launching an instance in GCP"},{"location":"gcp/getting-started/#pre_deployment","text":"Important The BYOL (Bring Your Own License) licensing model is one that relies on your purchasing a software license separately from our website here and registering your appliance with generated one time key. Important Assumption is that the NF Fabric is already up.","title":"Pre Deployment"},{"location":"gcp/getting-started/#deployment_of_appliance","text":"To get started, visit the GCP Marketplace site by clicking here . If the marketplace doesn't come up, you can go to the search bar that appears, enter NetFoundry Application Gateway and click the resulting solution that appears. To launch the instance Click on \"Launch On Compute Engine\" Supply the information needed","title":"Deployment of Appliance"},{"location":"gcp/getting-started/#launch_options","text":"Deployment name : Specify the name of the instance you would like to use. Zone : Specify the region you would like to launch your appliance. Machine type : The instance type and size for your appliance. For optimal performance, it is recommended that small (2 vCPU/8 GB RAM) is chosen, or better. Boot disk type : SSD Persistent Disk is appropriate for the appliance since there is minimal disk I/O for the instance. Boot disk size in GB : The instance by default comes with a 10 GB boot disk. SSH instance level key : (OPTIONAL)If you would like to apply an instance level ssh key. Block project wide ssh keys : (OPTIONAL) If you would like to prevent the project keys from being applied to this instance. Network name / Subnet name : The network you would like to place your appliance in. Firewall : (OPTIONAL) If you would like to allow ssh access to your instance, please check the box & fill out the restricted source ip/networks. We do not recommend leaving this open to 0.0.0.0/0 if you choose this option. IP forwarding : Must be set to on, if you would like to reach applications within your networks. GatewayRegistrationKey : (OPTIONAL) This field allows you provide the gateway registration key that will passed into the launching image. Automating the registration portion of the setup. You can access the gateway via ssh & register after this deployment is complete. Learn how to get a registration key here . Once the fields have been supplied, Click on \"Deploy\"","title":"Launch Options"},{"location":"gcp/getting-started/#post_deployment","text":"If you did not supply the GatewayRegistrationKey field during the deployment, you can access the machine via ssh by Clicking on the \"SSH\" button. OR You can optionally access this from other ssh point if you enabled the firewall rules to do so. Use the following command to register the gateway with your network: sudo nfnreg {registration key} Setup is complete.","title":"Post Deployment"},{"location":"gcp/intro/","text":"Use Case Overview @ Users can reach application located in GCP's private subnets over Internet using secure tunnels from anywhere users have connections to the Internet as depicted in the diagram. Note The tunnels are encrypted and user-app sessions are hashed across 3 diverse paths by default. Use Case Diagram @","title":"Overview"},{"location":"gcp/intro/#use_case_overview","text":"Users can reach application located in GCP's private subnets over Internet using secure tunnels from anywhere users have connections to the Internet as depicted in the diagram. Note The tunnels are encrypted and user-app sessions are hashed across 3 diverse paths by default.","title":"Use Case Overview"},{"location":"gcp/intro/#use_case_diagram","text":"","title":"Use Case Diagram"},{"location":"hypervisor/overview/","text":"Welcome to the HyperVisor Section @ Here you can lean how to launch and use NetFoundry products with the major HyperVisor in the market. Click on a specific Hypervisor to learn more.","title":"Overview"},{"location":"hypervisor/overview/#welcome_to_the_hypervisor_section","text":"Here you can lean how to launch and use NetFoundry products with the major HyperVisor in the market. Click on a specific Hypervisor to learn more.","title":"Welcome to the HyperVisor Section"},{"location":"hypervisor/hyper-v/getting-started/","text":"How to Launch a NetFoundry Gateway on Hyper-V 2016/2019 @ Prerequisites Windows 2016 server already running All powershell commands require Administrative Privileges Installing Hyper-V @ Installing Binaries @ If not already installed, you'll need to install hyper-v Issue the following command to install hyper-v this will restart your server Install-WindowsFeature -Name Hyper-V -IncludeManagementTools -Restart Installing a VMSwitch @ You'll need to have at least one VMSwitch if you don't already have one. Please note , we are adding an Internal switch for setup with a NAT server. Issue the following command to install a new \"Internal\" VSwitch New-VMSwitch -SwitchName \"Hyper-VSwitch\" -SwitchType Internal Configuring NAT @ In order to create a NAT IP Address, you need to associate it with the Hyper-V VMSwtich(Hyper-V Virtual Ethernet Adapter), like the one created above. To see the current adapters, issue the following command Get-NetAdapter Use the result to create a new NATIPAddress on the specified Interface New-NetIPAddress -IPAddress 192.168.0.1 -PrefixLength 24 -InterfaceIndex 5 How you can tell hyper-v what to allow through the Net IPAddresss New-NetNat -Name MyNATnetwork -InternalIPInterfaceAddressPrefix 192.168.0.0/24 Configuring DHCP @ Use the following command to install the dhcp feature: Install-WindowsFeature -Name 'DHCP' -IncludeManagementTools To create a new DHCP Scope: Add-DhcpServerv4Scope -Name GuestIPRange -StartRange 192.168.0.10 -EndRange 192.168.0.20 -SubnetMask 255.255.255.0 -State Active To adjust the DHCP Scope Options: Set-DhcpServerv4OptionValue -ScopeId GuestIPRange -Router 192.168.1.1 Important If the DHCP MMC snap-in shows an exclamation mark & doesn't show the scope, you might need to add a hosts entry in c:\\windows\\system32\\drivers\\etc\\hosts Example entry: 192.168.0.1 {name of the server} Creating a new Virtual Machine NetFoundry Gateway @ Download our Hyper-V image from the download site: Downloads Unzip the file to access the VHD file. Open the Hyper-V Manager Click on \"New\" \u2192 \"Virtual Machine...\" Name the Virtual Machine Select \"Generation 1\" Assign memory to the Virtual Machine Assign the Virtual Machine to a VMSwitch Point the downloaded VHD Finish the Virtual Machine Setup You can now start the VM","title":"Getting Started"},{"location":"hypervisor/hyper-v/getting-started/#how_to_launch_a_netfoundry_gateway_on_hyper-v_20162019","text":"Prerequisites Windows 2016 server already running All powershell commands require Administrative Privileges","title":"How to Launch a NetFoundry Gateway on Hyper-V 2016/2019"},{"location":"hypervisor/hyper-v/getting-started/#installing_hyper-v","text":"","title":"Installing Hyper-V"},{"location":"hypervisor/hyper-v/getting-started/#installing_binaries","text":"If not already installed, you'll need to install hyper-v Issue the following command to install hyper-v this will restart your server Install-WindowsFeature -Name Hyper-V -IncludeManagementTools -Restart","title":"Installing Binaries"},{"location":"hypervisor/hyper-v/getting-started/#installing_a_vmswitch","text":"You'll need to have at least one VMSwitch if you don't already have one. Please note , we are adding an Internal switch for setup with a NAT server. Issue the following command to install a new \"Internal\" VSwitch New-VMSwitch -SwitchName \"Hyper-VSwitch\" -SwitchType Internal","title":"Installing a VMSwitch"},{"location":"hypervisor/hyper-v/getting-started/#configuring_nat","text":"In order to create a NAT IP Address, you need to associate it with the Hyper-V VMSwtich(Hyper-V Virtual Ethernet Adapter), like the one created above. To see the current adapters, issue the following command Get-NetAdapter Use the result to create a new NATIPAddress on the specified Interface New-NetIPAddress -IPAddress 192.168.0.1 -PrefixLength 24 -InterfaceIndex 5 How you can tell hyper-v what to allow through the Net IPAddresss New-NetNat -Name MyNATnetwork -InternalIPInterfaceAddressPrefix 192.168.0.0/24","title":"Configuring NAT"},{"location":"hypervisor/hyper-v/getting-started/#configuring_dhcp","text":"Use the following command to install the dhcp feature: Install-WindowsFeature -Name 'DHCP' -IncludeManagementTools To create a new DHCP Scope: Add-DhcpServerv4Scope -Name GuestIPRange -StartRange 192.168.0.10 -EndRange 192.168.0.20 -SubnetMask 255.255.255.0 -State Active To adjust the DHCP Scope Options: Set-DhcpServerv4OptionValue -ScopeId GuestIPRange -Router 192.168.1.1 Important If the DHCP MMC snap-in shows an exclamation mark & doesn't show the scope, you might need to add a hosts entry in c:\\windows\\system32\\drivers\\etc\\hosts Example entry: 192.168.0.1 {name of the server}","title":"Configuring DHCP"},{"location":"hypervisor/hyper-v/getting-started/#creating_a_new_virtual_machine_netfoundry_gateway","text":"Download our Hyper-V image from the download site: Downloads Unzip the file to access the VHD file. Open the Hyper-V Manager Click on \"New\" \u2192 \"Virtual Machine...\" Name the Virtual Machine Select \"Generation 1\" Assign memory to the Virtual Machine Assign the Virtual Machine to a VMSwitch Point the downloaded VHD Finish the Virtual Machine Setup You can now start the VM","title":"Creating a new Virtual Machine NetFoundry Gateway"},{"location":"hypervisor/kvm/getting-started/","text":"Coming soon @","title":"Getting Started"},{"location":"hypervisor/kvm/getting-started/#coming_soon","text":"","title":"Coming soon"},{"location":"hypervisor/virtualbox/getting-started/","text":"Coming soon @","title":"Getting Started"},{"location":"hypervisor/virtualbox/getting-started/#coming_soon","text":"","title":"Coming soon"},{"location":"hypervisor/vmware/getting-started/","text":"Coming soon @","title":"Getting Started"},{"location":"hypervisor/vmware/getting-started/#coming_soon","text":"","title":"Coming soon"},{"location":"netfoundry/client/","text":"Overview @ One can find all the details needed to deploy NF Endpoint App on various Operating systems using the links below. Introduction to Client Endpoints NetFoundry Client FAQ Troubleshoot Client and Gateway Registration Errors","title":"NF Clients"},{"location":"netfoundry/client/#overview","text":"One can find all the details needed to deploy NF Endpoint App on various Operating systems using the links below. Introduction to Client Endpoints NetFoundry Client FAQ Troubleshoot Client and Gateway Registration Errors","title":"Overview"},{"location":"netfoundry/fabric/","text":"Overview @ This section will show how to do that through NF Console , and programatically using NF Orchestration's APIs via Console UI @ Click on Network Menu Click on \"+\" button in the top right corner to create a network Give it a name, e.g. \"DemoNet01\" Wait until the icon network turns green. Done via REST API (Python) @ Note For the code clarity, we have broken down the code into multiple Python modules NF REST CRUD (Create,Read, Update and Delete) operations Get MOP Session Token Create NF Network Wrapper Script to Create NF Resources based on Resource yaml file To obtain a session token, the MOP Session Token script parses a configuration file for clientId, and clientSecret if they are not passed to it through the positional arguments (e.g. env, clientId, clientSecret). This configuration file must be located in the home directory under '~/.env' Clone this repo (git clone https://github.com/netfoundry/mop.git) Change directory to cd mop Update Resource yaml file with the desired options to feed into the wrapper script as described in the following code snippet. Run this from the root folder python3 quickstarts / docs / api / python / nf_resources . py -- file quickstarts / docs / api / python / nf_resources . yml Required Configuration Paramters environment : { NF Console Environment , e.g. Production } network_action : { e.g. create , get , delete } network_name : { e.g. DemoNet01 } Done Note The logs will be outputted to the log file named logoutput.txt under the directory that the script is run './'.","title":"NF Fabric"},{"location":"netfoundry/fabric/#overview","text":"This section will show how to do that through NF Console , and programatically using NF Orchestration's APIs","title":"Overview"},{"location":"netfoundry/fabric/#via_console_ui","text":"Click on Network Menu Click on \"+\" button in the top right corner to create a network Give it a name, e.g. \"DemoNet01\" Wait until the icon network turns green. Done","title":"via Console UI"},{"location":"netfoundry/fabric/#via_rest_api_python","text":"Note For the code clarity, we have broken down the code into multiple Python modules NF REST CRUD (Create,Read, Update and Delete) operations Get MOP Session Token Create NF Network Wrapper Script to Create NF Resources based on Resource yaml file To obtain a session token, the MOP Session Token script parses a configuration file for clientId, and clientSecret if they are not passed to it through the positional arguments (e.g. env, clientId, clientSecret). This configuration file must be located in the home directory under '~/.env' Clone this repo (git clone https://github.com/netfoundry/mop.git) Change directory to cd mop Update Resource yaml file with the desired options to feed into the wrapper script as described in the following code snippet. Run this from the root folder python3 quickstarts / docs / api / python / nf_resources . py -- file quickstarts / docs / api / python / nf_resources . yml Required Configuration Paramters environment : { NF Console Environment , e.g. Production } network_action : { e.g. create , get , delete } network_name : { e.g. DemoNet01 } Done Note The logs will be outputted to the log file named logoutput.txt under the directory that the script is run './'.","title":"via REST API (Python)"},{"location":"netfoundry/gateway/","text":"Overview @ One can find all the details needed to deploy NF Gateway Appliance on various Virtualization Hypervisors using the links below. Introduction to Gateway Endpoints NetFoundry Client FAQ Troubleshoot Client and Gateway Registration Errors","title":"NF Gateways"},{"location":"netfoundry/gateway/#overview","text":"One can find all the details needed to deploy NF Gateway Appliance on various Virtualization Hypervisors using the links below. Introduction to Gateway Endpoints NetFoundry Client FAQ Troubleshoot Client and Gateway Registration Errors","title":"Overview"},{"location":"netfoundry/intro/","text":"This section will provide details on how to deploy NF Network Fabric and its components. It will also provide all the details needed to deploy the edge NF app on various Operation Systems or appliance on various Virtualization Hypervisors to connect and authenticate them to the NF Fabric.","title":"Overview"},{"location":"vcpe/cpe-automation/","text":"CPE Automation @ Use this procedure to create NF Gateway enabled equipment automatically. 1. Summary @ This guide will cover the following sections @ Create an automation VM by using OVA provided by NetFoundry. This is a one-time setup. Install CentOS7 OS on the CPE box. Run the automation script from the automation VM to setup the CPE box This guide will not cover @ This guide will only cover deployment of OVA with VMWare6.7, it will not cover all hypervisor out there. However, the provided OVA will work with VM Workstation 12 or EXSi 6.5 or later and VirtualBox. This guide will not cover how to setup installation media of Cent7 OS. At the end of guide, it will describe where to find the OS image and some tools. 2. Create Automation VM @ Note This procedure only needs to execute once for all CPE boxes. It is recommended to create this VM using VMWare hypervisor. Obtain the CPE-Automation OVA @ Todo We will need to put the OVA somewhere customer can download. Create the VM with the OVA @ From your hypervisor, create a VM and use the Deploy from OVA option Hit \" Next \", and you can choose your OVA image and give a name to the VM you are creating Hit \" Next \", it will ask you which storage (Disk) you want to put your VM. Choose one that suits you. Hit \" Next \u201c and choose your Network. (Hint, \"VM Network\" is your default network, that usually is a good choice). For \"Disk provisioning\", you can leave it at the default choice of \"Thin\". Hit \" Next \", and you are ready to deploy the OVA. Review the content carefully and hit \" Finish \" to deploy it. After you hit \" Finish \", on the Task window, you should notice the VM been created. Once the it reaches 100%, your VM is created. And it should automatically start after the deployment is done. Login and Check the automation VM @ Once the VM is completely deployed, we need to make sure the VM is setup correctly. Go to the main VM window, right click on your VM, on the popup menu, choose \" Console \"->\" Open browser console \". You will see a console window pop up like this: Login to the console by using credential Username: nfadmin Password: nfadmin Check the IP setting by issuing \" ip a \" command. If you see a valid IP address, then your VM is on a network. You can verify ssh access to the VM by using a ssh enabled terminal: > ssh nfadmin@[ip_address_of_the_automation_vm] Conclusion This is the end of deploying the automation VM. 3. Installing CentOS 7 on the CPE @ Note Have this ready before you start: You will need a CentOS 7 installation media before you start. Insert an Ethernet Cable into your CPE and bootup your CPE via the installation media, you will encounter the first screen: Choose \" Install CentOS 7 \" to continue. On the next screen, Choose your Language. And hit \" Continue \" The \" INSTALLATION SUMMARY \" screen will appear. Check to make sure the step (1) \" SOFTWARE SELECTION \" is set to \" Minimal Install \". Then Click on step (2) \" INSTALLATION DESTINATION \" to setup the Disk. Once in the \" INSTALLATION DESTINATION \" screen Choose your Disk (NOT the USB installation media) Click on \" Automatically configure partitioning \" Then hit \" Done \" at the top left screen to continue. Once you are back to the \"INSTALLATION SUMMARY\" screen Choose step (3) \"NETWORK & HOST NAME\". The following screen should appear. Turn on the Ethernet by hitting the button marked (1). And then observe the IP Address appears below it (at area Marked (2)). (We will need that IP address when we run the automation). Then hit \" Done \" at the top left screen to continue. You should be back to the \"INSTALLATION SUMAMRY\" screen again, and you can hit \" Begin Installation\" \" to start the Installation. During the installation, you need to create a user account. For our deployment, you do not need to create root Password. So, press on \" USER CREATION \" to create an Admin user. On the \" CREATE USER \" screen, you need to fill the following: Username: nfadmin click on \" Make this user administrator \" Password: nfadmin You then need to click \" Done \" twice to exit this screen. You will be sent back to the installation screen, wait for it to complete installation, and the \" Reboot \" button will appear for you to restart the CPE with the CentOS installed. Conclusion This is the end of installing CentOS 7 on the CPE box. 4. Run Automation to setup the CPE box @ Note You will need the IP address of your automation VM and the IP address of your CPE to continue this step Connect to your automation VM via ssh from a terminal > ssh nfadmin@[ip_address_of_the_automation_vm] Login to the VM by using password: nfadmin Start the automation by issuing the following command: > ./setup-nfnbox.bash [ip_address_of_cpe] The automation will prompt you to enter \" SSH password \" to login to the CPE box ( nfadmin ) \" BECOME password \" (hit <ENTER> key) The automation will take a few minutes to complete. At the end of automation, you will see message like this: PLAY RECAP ****************************************************************************************************************** 10.111.111.1 : ok=6 changed=3 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0 192.168.1.184 : ok=35 changed=28 unreachable=0 failed=0 skipped=2 rescued=0 ignored=0 Conclusion The CPE is now setup and ready. 5. CentOS 7 Installation Media @ Disclaimer There are many ways to obtain and setup the installation media. If you never set one up before, the quickest and easiest way to create one is by downloading the OS image and burn it to a USB by using disk utility. CentOS 7 image @ You can obtain a copy of OS image by visiting centos.org. But since you need to get a CentOS 7 image (not the latest CentOS 8), here is a quick link to Cent7OS mirror sites: http://isoredirect.centos.org/centos/7/isos/x86_64/ Recommend download the \"CentOS-7-x86_64-DVD-xxxx.iso\" (around 4.5G). This is the image tested. Since we use minimal installation from CentOS 7, so the minimal image should work also \"CentOS-7-x86_64-Minimal-xxxx.iso\" (around 1G) Burn Image to a USB stick @ You can burn the image to a USB stick by using Rufus (if you are on a PC). You can find many tutorials on the internet if you have trouble","title":"CPE Automation"},{"location":"vcpe/cpe-automation/#cpe_automation","text":"Use this procedure to create NF Gateway enabled equipment automatically.","title":"CPE Automation"},{"location":"vcpe/cpe-automation/#1_summary","text":"","title":"1. Summary"},{"location":"vcpe/cpe-automation/#this_guide_will_cover_the_following_sections","text":"Create an automation VM by using OVA provided by NetFoundry. This is a one-time setup. Install CentOS7 OS on the CPE box. Run the automation script from the automation VM to setup the CPE box","title":"This guide will cover the following sections"},{"location":"vcpe/cpe-automation/#this_guide_will_not_cover","text":"This guide will only cover deployment of OVA with VMWare6.7, it will not cover all hypervisor out there. However, the provided OVA will work with VM Workstation 12 or EXSi 6.5 or later and VirtualBox. This guide will not cover how to setup installation media of Cent7 OS. At the end of guide, it will describe where to find the OS image and some tools.","title":"This guide will not cover"},{"location":"vcpe/cpe-automation/#2_create_automation_vm","text":"Note This procedure only needs to execute once for all CPE boxes. It is recommended to create this VM using VMWare hypervisor.","title":"2. Create Automation VM"},{"location":"vcpe/cpe-automation/#obtain_the_cpe-automation_ova","text":"Todo We will need to put the OVA somewhere customer can download.","title":"Obtain the CPE-Automation OVA"},{"location":"vcpe/cpe-automation/#create_the_vm_with_the_ova","text":"From your hypervisor, create a VM and use the Deploy from OVA option Hit \" Next \", and you can choose your OVA image and give a name to the VM you are creating Hit \" Next \", it will ask you which storage (Disk) you want to put your VM. Choose one that suits you. Hit \" Next \u201c and choose your Network. (Hint, \"VM Network\" is your default network, that usually is a good choice). For \"Disk provisioning\", you can leave it at the default choice of \"Thin\". Hit \" Next \", and you are ready to deploy the OVA. Review the content carefully and hit \" Finish \" to deploy it. After you hit \" Finish \", on the Task window, you should notice the VM been created. Once the it reaches 100%, your VM is created. And it should automatically start after the deployment is done.","title":"Create the VM with the OVA"},{"location":"vcpe/cpe-automation/#login_and_check_the_automation_vm","text":"Once the VM is completely deployed, we need to make sure the VM is setup correctly. Go to the main VM window, right click on your VM, on the popup menu, choose \" Console \"->\" Open browser console \". You will see a console window pop up like this: Login to the console by using credential Username: nfadmin Password: nfadmin Check the IP setting by issuing \" ip a \" command. If you see a valid IP address, then your VM is on a network. You can verify ssh access to the VM by using a ssh enabled terminal: > ssh nfadmin@[ip_address_of_the_automation_vm] Conclusion This is the end of deploying the automation VM.","title":"Login and Check the automation VM"},{"location":"vcpe/cpe-automation/#3_installing_centos_7_on_the_cpe","text":"Note Have this ready before you start: You will need a CentOS 7 installation media before you start. Insert an Ethernet Cable into your CPE and bootup your CPE via the installation media, you will encounter the first screen: Choose \" Install CentOS 7 \" to continue. On the next screen, Choose your Language. And hit \" Continue \" The \" INSTALLATION SUMMARY \" screen will appear. Check to make sure the step (1) \" SOFTWARE SELECTION \" is set to \" Minimal Install \". Then Click on step (2) \" INSTALLATION DESTINATION \" to setup the Disk. Once in the \" INSTALLATION DESTINATION \" screen Choose your Disk (NOT the USB installation media) Click on \" Automatically configure partitioning \" Then hit \" Done \" at the top left screen to continue. Once you are back to the \"INSTALLATION SUMMARY\" screen Choose step (3) \"NETWORK & HOST NAME\". The following screen should appear. Turn on the Ethernet by hitting the button marked (1). And then observe the IP Address appears below it (at area Marked (2)). (We will need that IP address when we run the automation). Then hit \" Done \" at the top left screen to continue. You should be back to the \"INSTALLATION SUMAMRY\" screen again, and you can hit \" Begin Installation\" \" to start the Installation. During the installation, you need to create a user account. For our deployment, you do not need to create root Password. So, press on \" USER CREATION \" to create an Admin user. On the \" CREATE USER \" screen, you need to fill the following: Username: nfadmin click on \" Make this user administrator \" Password: nfadmin You then need to click \" Done \" twice to exit this screen. You will be sent back to the installation screen, wait for it to complete installation, and the \" Reboot \" button will appear for you to restart the CPE with the CentOS installed. Conclusion This is the end of installing CentOS 7 on the CPE box.","title":"3. Installing CentOS 7 on the CPE"},{"location":"vcpe/cpe-automation/#4_run_automation_to_setup_the_cpe_box","text":"Note You will need the IP address of your automation VM and the IP address of your CPE to continue this step Connect to your automation VM via ssh from a terminal > ssh nfadmin@[ip_address_of_the_automation_vm] Login to the VM by using password: nfadmin Start the automation by issuing the following command: > ./setup-nfnbox.bash [ip_address_of_cpe] The automation will prompt you to enter \" SSH password \" to login to the CPE box ( nfadmin ) \" BECOME password \" (hit <ENTER> key) The automation will take a few minutes to complete. At the end of automation, you will see message like this: PLAY RECAP ****************************************************************************************************************** 10.111.111.1 : ok=6 changed=3 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0 192.168.1.184 : ok=35 changed=28 unreachable=0 failed=0 skipped=2 rescued=0 ignored=0 Conclusion The CPE is now setup and ready.","title":"4. Run Automation to setup the CPE box"},{"location":"vcpe/cpe-automation/#5_centos_7_installation_media","text":"Disclaimer There are many ways to obtain and setup the installation media. If you never set one up before, the quickest and easiest way to create one is by downloading the OS image and burn it to a USB by using disk utility.","title":"5. CentOS 7 Installation Media"},{"location":"vcpe/cpe-automation/#centos_7_image","text":"You can obtain a copy of OS image by visiting centos.org. But since you need to get a CentOS 7 image (not the latest CentOS 8), here is a quick link to Cent7OS mirror sites: http://isoredirect.centos.org/centos/7/isos/x86_64/ Recommend download the \"CentOS-7-x86_64-DVD-xxxx.iso\" (around 4.5G). This is the image tested. Since we use minimal installation from CentOS 7, so the minimal image should work also \"CentOS-7-x86_64-Minimal-xxxx.iso\" (around 1G)","title":"CentOS 7 image"},{"location":"vcpe/cpe-automation/#burn_image_to_a_usb_stick","text":"You can burn the image to a USB stick by using Rufus (if you are on a PC). You can find many tutorials on the internet if you have trouble","title":"Burn Image to a USB stick"},{"location":"vcpe/intro/","text":"Use Case Overview @ Users can reach application located in VCPE's private subnets over Internet using secure tunnels from anywhere users have connections to the Internet as depicted in the diagram. Note The tunnels are encrypted and user-app sessions are hashed across 3 diverse paths by default. Use Case Diagram @","title":"Overview"},{"location":"vcpe/intro/#use_case_overview","text":"Users can reach application located in VCPE's private subnets over Internet using secure tunnels from anywhere users have connections to the Internet as depicted in the diagram. Note The tunnels are encrypted and user-app sessions are hashed across 3 diverse paths by default.","title":"Use Case Overview"},{"location":"vcpe/intro/#use_case_diagram","text":"","title":"Use Case Diagram"}]}