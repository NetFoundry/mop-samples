pipeline {
  agent {
    docker {
      image "netfoundry/jenkins-slave-edge:py3"
      registryCredentialsId 'dockerhub'
      registryUrl 'https://index.docker.io/v1/'
      alwaysPull true
    }
  }
  parameters {
    choice(name: 'environment', choices: [ 'staging', 'sandbox'], description: 'Select NF Console Environment to spin the network and gateways in')
    booleanParam(name: 'createAVW', defaultValue: true, description: 'Create AVW site along wit hall the resources needed, e.g, vhub')
    booleanParam(name: 'deleteAVW', defaultValue: true, description: 'Delete AVW site along wit hall the resources needed, e.g, vhub')
    string(name: 'vnetPrefix', defaultValue: '10.10.0.0/16', description: 'vnet entire IP block')
    string(name: 'subnetPrefix', defaultValue: '10.10.10.0/24', description: 'subnet prefix')
    string(name: 'vhubPrefix', defaultValue: '172.168.10.0/24', description: 'virtual hub subnet')
    string(name: 'avwLocation', defaultValue: 'westus2', description: 'avw region')
  }
  environment {
    // Azure Credentials
    ARM_TENANT_ID = "25445e86-2ae6-4434-b116-25c66c27168d"
    ARM_SUBSCRIPTION_ID = "8699c8dd-f425-46fa-85ef-cefe299aeb4f"
    AWS_CONFIG_FILE = "${WORKSPACE}/aws/aws-config"
    // Test Input Variables
    GROUP_NAME = "clouddev-smoke"
    VNET_NAME = "AVW-PT-vnet"
    VNET_PREFIX = "${params.vnetPrefix}"
    SUBNET_PREFIX = "${params.subnetPrefix}"
    VHUB_PREFIX = "${params.vhubPrefix}"
    LOCATION = "${params.avwLocation}"
    SUBNET_NAME = "AVW-PT-subnet"
    KEY1 = "AVW Packet Test"
    VWAN_NAME = "AVW-PT-VWAN"
    VHUB_NAME = "AVW-PT-VHUB"
    VPNG_NAME = "AVW-PT-VPNG"
  }
  stages {
    stage('Set up WORKSPACE'){
      steps {
        // all stages use the same container and WORKSPACE in that running container, and so only one checkout is necessary
        checkout([$class: 'GitSCM', userRemoteConfigs: [[url: 'https://github.com/netfoundry/mop.git']]])
      }
    }
    stage('Create AVW Site'){
      when { expression { params.createAVW }}
      steps {
        withCredentials([
            usernamePassword(credentialsId: 'azure-edge-packer-builder', usernameVariable: 'ARM_CLIENT_ID', passwordVariable: 'ARM_CLIENT_SECRET')
          ]){
            // the build steps require for Azure
            sh '''set +x; set -e -u
            eval python3 quickstarts/docs/python/azure/azure_vwan_create.py
            '''
        }
      }
    }
    stage('Delete AVW Site'){
      when { expression { params.deleteAVW }}
      steps {
        withCredentials([
            usernamePassword(credentialsId: 'azure-edge-packer-builder', usernameVariable: 'ARM_CLIENT_ID', passwordVariable: 'ARM_CLIENT_SECRET')
          ]){
            // the build steps require for Azure
            sh '''set +x; set -e -u
            eval python3 quickstarts/docs/python/azure/azure_vwan_delete.py
            '''
        }
      }

    }
  }
}
