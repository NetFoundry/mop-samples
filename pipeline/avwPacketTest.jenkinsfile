pipeline {
  agent {
    docker {
      image "netfoundry/jenkins-slave-edge:py3"
      registryCredentialsId 'dockerhub'
      registryUrl 'https://index.docker.io/v1/'
      alwaysPull true
    }
  }
  parameters {
    choice(name: 'ENVIRONMENT', choices: ['sandbox', 'staging'], description: 'Select NF Console Environment to spin the network and gateways in')
    booleanParam(name: 'CREATE_AVWH', defaultValue: true, description: 'Create Azure VWAN along with all the resources needed, e.g, vhub')
    booleanParam(name: 'DELETE_AVWH', defaultValue: true, description: 'Delete Azure VWAN along with all the resources needed, e.g, vhub')
    booleanParam(name: 'CREATE_VPNG', defaultValue: true, description: 'Create Azure VPN Gateway')
    booleanParam(name: 'DELETE_VPNG', defaultValue: true, description: 'Delete Azure VPN Gateway')
    booleanParam(name: 'CREATE_NFNK', defaultValue: true, description: 'Create NetFoundry Network')
    booleanParam(name: 'DELETE_NFNK', defaultValue: true, description: 'Delete NetFoundry Network')
    string(name: 'VNET_PREFIX', defaultValue: '10.10.0.0/16', description: 'vnet entire IP block')
    string(name: 'SUBNET_PREFIX', defaultValue: '10.10.10.0/24', description: 'subnet prefix')
    string(name: 'VHUB_PREFIX', defaultValue: '172.168.10.0/24', description: 'virtual hub subnet')
    string(name: 'AVW_LOCATION', defaultValue: 'westus2', description: 'avw region')
  }
  environment {
    // Azure Credentials
    ARM_TENANT_ID = "25445e86-2ae6-4434-b116-25c66c27168d"
    ARM_SUBSCRIPTION_ID = "8699c8dd-f425-46fa-85ef-cefe299aeb4f"
    AWS_CONFIG_FILE = "${WORKSPACE}/aws/aws-config"
    // Test Input Variables
    ENVIRONMENT = "${params.ENVIRONMENT}"
    GROUP_NAME = "clouddev-smoke"
    VNET_NAME = "AVW-PT-vnet"
    VNET_PREFIX = "${params.VNET_PREFIX}"
    SUBNET_PREFIX = "${params.SUBNET_PREFIX}"
    VHUB_PREFIX = "${params.VHUB_PREFIX}"
    LOCATION = "${params.AVW_LOCATION}"
    SUBNET_NAME = "AVW-PT-subnet"
    KEY1 = "AVW Packet Test"
    VWAN_NAME = "AVW-PT-VWAN"
    VHUB_NAME = "AVW-PT-VHUB"
    VPNG_NAME = "AVW-PT-VPNG"
    NFN_NAME = "AVW-PT-NFN"
  }
  stages {
    stage('Set up WORKSPACE'){
      steps {
        // all stages use the same container and WORKSPACE in that running container, and so only one checkout is necessary
        checkout([$class: 'GitSCM', userRemoteConfigs: [[url: 'https://github.com/netfoundry/mop.git']]])
      }
    }
    stage('Create Azure VWAN'){
      when { expression { params.CREATE_AVWH }}
      steps {
        withCredentials([
            usernamePassword(credentialsId: 'azure-edge-packer-builder', usernameVariable: 'ARM_CLIENT_ID', passwordVariable: 'ARM_CLIENT_SECRET')
          ]){
            // the build steps require for Azure
            sh '''set +x; set -e -u -o pipefail
            eval python3 quickstarts/docs/python/azure/azure_vwan_create.py
            '''
        }
      }
    }
    stage('Create VPN Gateway and NF Network'){
      parallel{
        stage('Create Azure VPN Gateway'){
          when { expression { params.CREATE_VPNG }}
          steps {
            withCredentials([
                usernamePassword(credentialsId: 'azure-edge-packer-builder', usernameVariable: 'ARM_CLIENT_ID', passwordVariable: 'ARM_CLIENT_SECRET')
              ]){
                // the build steps require for Azure
                sh '''set +x; set -e -u -o pipefail
                eval python3 quickstarts/docs/python/azure/azure_vpng_create.py
                '''
            }
          }
        }
        stage('Create NF Network'){
          when { expression { params.CREATE_NFNK }}
          steps {
            // the build steps to create NF Network
            withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "auth0_jenkinsorg_${params.ENVIRONMENT}", usernameVariable: 'SMOKE_TEST_USER', passwordVariable: 'SMOKE_TEST_PASS']]) {
              sh '''
                set -Eeuxo pipefail
                eval python3 quickstarts/docs/python/nfn_create.py
                eval cat logoutput.txt
                '''
            }
          }
        }
      }
    }
    stage('Delete VPN Gateway and NF Network'){
      parallel{
        stage('Delete Azure VPN Gateway'){
          when { expression { params.DELETE_VPNG }}
          steps {
            withCredentials([usernamePassword(credentialsId: 'azure-edge-packer-builder', usernameVariable: 'ARM_CLIENT_ID', passwordVariable: 'ARM_CLIENT_SECRET')]){
              // the build steps require for Azure
              sh '''set +x; set -e -u -o pipefail
              eval python3 quickstarts/docs/python/azure/azure_vpng_delete.py
              '''
            }
          }
        }
        stage('Delete NF Network'){
          when { expression { params.DELETE_NFNK }}
          steps {
            // the build steps to delete NF Network
            withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "auth0_jenkinsorg_${params.ENVIRONMENT}", usernameVariable: 'SMOKE_TEST_USER', passwordVariable: 'SMOKE_TEST_PASS']]) {
              sh '''
                set +x; set -e -u -o pipefail
                NF_TOKEN=`eval python3 quickstarts/docs/python/nf_token.py  --env $ENVIRONMENT`
                eval echo $NF_TOKEN
                eval echo $NFN_NAME
                eval echo $ENVIRONMENT
                NFN_URL=`eval python3 quickstarts/docs/python/nf_network.py --action find --token $NF_TOKEN --name $NFN_NAME --env $ENVIRONMENT`
                eval echo $NFN_URL
                eval python3 quickstarts/docs/python/nf_network.py --action delete --token $NF_TOKEN --name $NFN_URL
                eval cat logoutput.txt
              '''
            }
          }
        }
      }
    }
    stage('Delete Azure VWAN'){
      when { expression { params.DELETE_AVWH }}
      steps {
        withCredentials([
            usernamePassword(credentialsId: 'azure-edge-packer-builder', usernameVariable: 'ARM_CLIENT_ID', passwordVariable: 'ARM_CLIENT_SECRET')
          ]){
            // the build steps require for Azure
            sh '''set +x; set -e -u -o pipefail
            eval python3 quickstarts/docs/python/azure/azure_vwan_delete.py
            '''
        }
      }
    }
  }
}
